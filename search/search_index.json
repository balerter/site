{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Balerter is a Self Hosted Script Based Alert Manager What is it? The Balerter allows you to describe alert rules using scripts. This makes it possible to program rules of any complexity. Balerter has internal support Lua for scripts writing. Since v0.10.0 you can use you preferred languages with HTTP Core API. With Core API using you have to take care of running the scripts regularly. See more in Core API . Reasons for creating Balerter was born from need to create complex business-metrics, which very hard to create declaratively. A typical case: - get historical data from first source - get operative data from second source - make needed calculation - if our results are disturbing - get meta-data from third source - make a error message - send a notification to messengers, etc - repeat this steps every hour There can be many such cases. Checking free space on hard disks or monitoring customer spends. Checking the temperature in the refrigerator by http api or checking CPU load on servers. In fact, you are not limited in your cases, as you are not limited in writing any programs with you programming language. What does the Balerter give? declare all data source in one place. You do not need to write DB connections in each script. provide API for access to any datasource, but not shadowing implementation details. You need to write SQL queries manually. can send notification to different targets: email, messengers, syslog. The list is regularly updated by your requests makes it easy to attach a chart image to a notification run your scripts with a defined interval Concepts The main concept in Balerter is Alert . Alert can be thought of as some object, which has the property: level. The level can have one of three values: Error , Warning and Success . The level can be changed, but there can not be Alert with an undefined level. After creating an Alert, it has the Success level. The moment of level change is a trigger for sending a notification. An example. We have a Lua script, that runs 1 times per minute. -- @cron 0 * * * * alert = require ( 'alert' ) alert . error ( 'alert-id-1' , 'Something went wrong' ) After start of Balerter all Alerts have the Success status. On first run this script, command alert.error('alert-id-1', ...) set Error level for the Alert with id alert-id-1 . Since we have changed the level, you will receive a notification. After minute a script will be run again and again will set the Error level for the Alert. But because the Alert already has the Error level, a notification will not be sent. It will be repeated until the Alert level changed. After run alert.success('alert-id-1', ...) (or alert.warning ) in your script, the Alert level will be changed and you will receive a notification. An example: -- @cron 0 * * * * * alert = require ( 'alert' ) prom = require ( 'datasource.prometheus.prom1' ) result = prom . query ( 'sum(go_goroutines)' ) -- Result value example: -- { -- 1 = { -- metrics = {} -- timestamp = 1660055112 -- value = 957 -- } -- } if result [ 1 ]. value > 1000 then alert . error ( 'my-alert-id' , 'too many goroutines' ) else alert . ok ( 'my-alert-id' , 'goroutines count are ok' ) end Tip Calling alert.error does not send a notification. It changes the level value. A notification send when the level changes.","title":"Home"},{"location":"#what-is-it","text":"The Balerter allows you to describe alert rules using scripts. This makes it possible to program rules of any complexity. Balerter has internal support Lua for scripts writing. Since v0.10.0 you can use you preferred languages with HTTP Core API. With Core API using you have to take care of running the scripts regularly. See more in Core API .","title":"What is it?"},{"location":"#reasons-for-creating","text":"Balerter was born from need to create complex business-metrics, which very hard to create declaratively. A typical case: - get historical data from first source - get operative data from second source - make needed calculation - if our results are disturbing - get meta-data from third source - make a error message - send a notification to messengers, etc - repeat this steps every hour There can be many such cases. Checking free space on hard disks or monitoring customer spends. Checking the temperature in the refrigerator by http api or checking CPU load on servers. In fact, you are not limited in your cases, as you are not limited in writing any programs with you programming language.","title":"Reasons for creating"},{"location":"#what-does-the-balerter-give","text":"declare all data source in one place. You do not need to write DB connections in each script. provide API for access to any datasource, but not shadowing implementation details. You need to write SQL queries manually. can send notification to different targets: email, messengers, syslog. The list is regularly updated by your requests makes it easy to attach a chart image to a notification run your scripts with a defined interval","title":"What does the Balerter give?"},{"location":"#concepts","text":"The main concept in Balerter is Alert . Alert can be thought of as some object, which has the property: level. The level can have one of three values: Error , Warning and Success . The level can be changed, but there can not be Alert with an undefined level. After creating an Alert, it has the Success level. The moment of level change is a trigger for sending a notification. An example. We have a Lua script, that runs 1 times per minute. -- @cron 0 * * * * alert = require ( 'alert' ) alert . error ( 'alert-id-1' , 'Something went wrong' ) After start of Balerter all Alerts have the Success status. On first run this script, command alert.error('alert-id-1', ...) set Error level for the Alert with id alert-id-1 . Since we have changed the level, you will receive a notification. After minute a script will be run again and again will set the Error level for the Alert. But because the Alert already has the Error level, a notification will not be sent. It will be repeated until the Alert level changed. After run alert.success('alert-id-1', ...) (or alert.warning ) in your script, the Alert level will be changed and you will receive a notification. An example: -- @cron 0 * * * * * alert = require ( 'alert' ) prom = require ( 'datasource.prometheus.prom1' ) result = prom . query ( 'sum(go_goroutines)' ) -- Result value example: -- { -- 1 = { -- metrics = {} -- timestamp = 1660055112 -- value = 957 -- } -- } if result [ 1 ]. value > 1000 then alert . error ( 'my-alert-id' , 'too many goroutines' ) else alert . ok ( 'my-alert-id' , 'goroutines count are ok' ) end Tip Calling alert.error does not send a notification. It changes the level value. A notification send when the level changes.","title":"Concepts"},{"location":"changelog/","text":"v0.10.0 (2022-08-15) add Core API add colors marks to slack messages add log channel v0.9.4 (2022-05-26) cli flag --safemode for disable the http core module and os and io lua modules v0.9.3 (2022-04-19) Support for escalate alerts with @escalate meta-tag v0.9.2 (2022-03-10) add core module 'file' See more refactoring telegram channel api. It's possible to send image directly from chart.render , without store to the S3 storage remove escaping special characters for telegram messages v0.9.1 (2021-12-19) use pgxpool for postgres connections add missed 'resend' alert options behavior add options for http.request insecureSkipVerify timeout v0.9.0 (2021-10-07) update testing subsystem. Use test functions. See more v0.8.4 (2021-09-23) Add alert option fields v0.8.3 (2021-09-23) add meta module read more add config option system.cronLocation read more v0.8.2 (2021-08-30) secrets in the config file, read more v0.8.1 (2021-07-09) add config block system support for multiple job workers (Eliminates freezes during long execution of one script) v0.8.0 (2021-07-08) add the Twilio Voice channel, see a configuration add option Ignore to all channels add the resend alias for the repeat field for the alert options (scripts) v0.7.3 (2021-06-17) add the tls core module. getting the information about domain certificates v0.7.2 (2021-04-09) add the prometheus metric for exposing alerts levels (see documentation ) balerter_alert_status use ubuntu 20.10 as base image for docker images v0.7.1 (2021-04-02) bugfix: use milliseconds for datasource configs add core module api for getting information about the request, if script was run with API call add API for run the script by name switch to go 1.16 v0.7.0 (2021-03-05) Breaking changes This release has many breaking changes in: - configuration structure - alerts/kv storages - script sources - use @cron instead @interval in scripts - etc Please see actual information on this site.","title":"Changelog"},{"location":"changelog/#v0100-2022-08-15","text":"add Core API add colors marks to slack messages add log channel","title":"v0.10.0 (2022-08-15)"},{"location":"changelog/#v094-2022-05-26","text":"cli flag --safemode for disable the http core module and os and io lua modules","title":"v0.9.4 (2022-05-26)"},{"location":"changelog/#v093-2022-04-19","text":"Support for escalate alerts with @escalate meta-tag","title":"v0.9.3 (2022-04-19)"},{"location":"changelog/#v092-2022-03-10","text":"add core module 'file' See more refactoring telegram channel api. It's possible to send image directly from chart.render , without store to the S3 storage remove escaping special characters for telegram messages","title":"v0.9.2 (2022-03-10)"},{"location":"changelog/#v091-2021-12-19","text":"use pgxpool for postgres connections add missed 'resend' alert options behavior add options for http.request insecureSkipVerify timeout","title":"v0.9.1 (2021-12-19)"},{"location":"changelog/#v090-2021-10-07","text":"update testing subsystem. Use test functions. See more","title":"v0.9.0 (2021-10-07)"},{"location":"changelog/#v084-2021-09-23","text":"Add alert option fields","title":"v0.8.4 (2021-09-23)"},{"location":"changelog/#v083-2021-09-23","text":"add meta module read more add config option system.cronLocation read more","title":"v0.8.3 (2021-09-23)"},{"location":"changelog/#v082-2021-08-30","text":"secrets in the config file, read more","title":"v0.8.2 (2021-08-30)"},{"location":"changelog/#v081-2021-07-09","text":"add config block system support for multiple job workers (Eliminates freezes during long execution of one script)","title":"v0.8.1 (2021-07-09)"},{"location":"changelog/#v080-2021-07-08","text":"add the Twilio Voice channel, see a configuration add option Ignore to all channels add the resend alias for the repeat field for the alert options (scripts)","title":"v0.8.0 (2021-07-08)"},{"location":"changelog/#v073-2021-06-17","text":"add the tls core module. getting the information about domain certificates","title":"v0.7.3 (2021-06-17)"},{"location":"changelog/#v072-2021-04-09","text":"add the prometheus metric for exposing alerts levels (see documentation ) balerter_alert_status use ubuntu 20.10 as base image for docker images","title":"v0.7.2 (2021-04-09)"},{"location":"changelog/#v071-2021-04-02","text":"bugfix: use milliseconds for datasource configs add core module api for getting information about the request, if script was run with API call add API for run the script by name switch to go 1.16","title":"v0.7.1 (2021-04-02)"},{"location":"changelog/#v070-2021-03-05","text":"Breaking changes This release has many breaking changes in: - configuration structure - alerts/kv storages - script sources - use @cron instead @interval in scripts - etc Please see actual information on this site.","title":"v0.7.0 (2021-03-05)"},{"location":"api/about/","text":"In the api section of configuration file you can define listen address. By default 127.0.0.1:2000 API path /api/<API_VERSION>/<API_QUERY> Current API version v1 API methods Get alerts list GET /api/v1/alerts?levels=<LEVEL1>,<LEVEL2> Not mandatory query argument levels allow filtering results by alert levels. You can defined multiple values with comma delimiter Allowed levels values: success , warning , warn , error Response: [ { \"name\" : \"alert-id-1\" , \"level\" : \"success\" , \"level_num\" : 1 , \"count\" : 2 , \"last_change\" : \"2021-03-02T13:26:20Z\" , \"start\" : \"2021-02-21T17:48:22Z\" }, { \"name\" : \"fooabr2\" , \"level\" : \"error\" , \"level_num\" : 3 , \"count\" : 10 , \"last_change\" : \"2021-02-21T19:19:30Z\" , \"start\" : \"2021-02-21T19:19:30Z\" } ] Get an alert by the name GET /api/v1/alerts/{ALERT_NAME} Response example: { \"name\" : \"foobar2\" , \"level\" : \"error\" , \"level_num\" : 3 , \"count\" : 1 , \"last_change\" : \"2021-02-21T19:48:23Z\" , \"start\" : \"2021-02-21T19:43:12Z\" } Update the alert status POST /api/v1/alerts/{ALERT_NAME} Payload: { \"level\" : \"success\" , \"text\" : \"foo\" , \"channels\" : [ \"chan1\" , \"chan2\" ], \"quiet\" : true , \"repeat\" : 5 , \"image\" : \"https://domain.com/image.png\" } Only level and text fields are required. Return the updated alert model { \"name\" : \"foobar2\" , \"level\" : \"error\" , \"level_num\" : 3 , \"count\" : 1 , \"last_change\" : \"2021-02-21T19:48:23Z\" , \"start\" : \"2021-02-21T19:43:12Z\" } Get KV pairs from a storage GET /api/v1/kv A response example: { \"foo\" : \"bar\" \"bar\" : \"2\" , \"baz\" : \"true\" } Run script POST /api/v1/runtime/run/{SCRIPT_NAME} You should specify the script name in full format. For example: folder.name1.script_name (see more about script naming) The script will be run with no respect @ignore tag. You can get the request information with api module","title":"about"},{"location":"api/about/#api-methods","text":"","title":"API methods"},{"location":"api/about/#get-alerts-list","text":"GET /api/v1/alerts?levels=<LEVEL1>,<LEVEL2> Not mandatory query argument levels allow filtering results by alert levels. You can defined multiple values with comma delimiter Allowed levels values: success , warning , warn , error Response: [ { \"name\" : \"alert-id-1\" , \"level\" : \"success\" , \"level_num\" : 1 , \"count\" : 2 , \"last_change\" : \"2021-03-02T13:26:20Z\" , \"start\" : \"2021-02-21T17:48:22Z\" }, { \"name\" : \"fooabr2\" , \"level\" : \"error\" , \"level_num\" : 3 , \"count\" : 10 , \"last_change\" : \"2021-02-21T19:19:30Z\" , \"start\" : \"2021-02-21T19:19:30Z\" } ]","title":"Get alerts list"},{"location":"api/about/#get-an-alert-by-the-name","text":"GET /api/v1/alerts/{ALERT_NAME} Response example: { \"name\" : \"foobar2\" , \"level\" : \"error\" , \"level_num\" : 3 , \"count\" : 1 , \"last_change\" : \"2021-02-21T19:48:23Z\" , \"start\" : \"2021-02-21T19:43:12Z\" }","title":"Get an alert by the name"},{"location":"api/about/#update-the-alert-status","text":"POST /api/v1/alerts/{ALERT_NAME} Payload: { \"level\" : \"success\" , \"text\" : \"foo\" , \"channels\" : [ \"chan1\" , \"chan2\" ], \"quiet\" : true , \"repeat\" : 5 , \"image\" : \"https://domain.com/image.png\" } Only level and text fields are required. Return the updated alert model { \"name\" : \"foobar2\" , \"level\" : \"error\" , \"level_num\" : 3 , \"count\" : 1 , \"last_change\" : \"2021-02-21T19:48:23Z\" , \"start\" : \"2021-02-21T19:43:12Z\" }","title":"Update the alert status"},{"location":"api/about/#get-kv-pairs-from-a-storage","text":"GET /api/v1/kv A response example: { \"foo\" : \"bar\" \"bar\" : \"2\" , \"baz\" : \"true\" }","title":"Get KV pairs from a storage"},{"location":"api/about/#run-script","text":"POST /api/v1/runtime/run/{SCRIPT_NAME} You should specify the script name in full format. For example: folder.name1.script_name (see more about script naming) The script will be run with no respect @ignore tag. You can get the request information with api module","title":"Run script"},{"location":"api/metrics/","text":"The Balerter expose prometheus metrics on serviceAddress if it's defined in the configuration. (see configuration ) Under hood, we use prometheus default library for expose metrics. This library expose some default application metrics: go_gc_duration_seconds go_goroutines go_info go_memstats_alloc_bytes go_memstats_frees_total go_memstats_gc_cpu_fraction go_memstats_heap_alloc_bytes go_threads ...and more The Balerter add 3 custom metrics, which has the prefix balerter_ balerter_info_version balerter_scripts_active balerter_alert_status balerter_info_version This metric contains the balerter version as metrics label. The metrics value is always equals to 1. An example: balerter_info_version{version=\"v0.10.0\"} 1 balerter_scripts_active This metric contains the script name as metric label name . The metrics value equals to 1 if the script is active, and 0 if the script is inactive. An example: balerter_scripts_active{name=\"folder.dbg.d1\"} 1 balerter_scripts_active{name=\"folder.dbg.d2\"} 1 balerter_scripts_active{name=\"folder.f2.foo\"} 1 balerter_alert_status This metric contains the current alert statuses. An alert name (id) presents as label name . The metric value present the alert level Success - 1 Warning - 2 Error - 3 An example: balerter_alert_status{name=\"foo\"} 3 balerter_alert_status{name=\"bar\"} 1 balerter_alert_status{name=\"baz\"} 2","title":"metrics"},{"location":"api/metrics/#balerter_info_version","text":"This metric contains the balerter version as metrics label. The metrics value is always equals to 1. An example: balerter_info_version{version=\"v0.10.0\"} 1","title":"balerter_info_version"},{"location":"api/metrics/#balerter_scripts_active","text":"This metric contains the script name as metric label name . The metrics value equals to 1 if the script is active, and 0 if the script is inactive. An example: balerter_scripts_active{name=\"folder.dbg.d1\"} 1 balerter_scripts_active{name=\"folder.dbg.d2\"} 1 balerter_scripts_active{name=\"folder.f2.foo\"} 1","title":"balerter_scripts_active"},{"location":"api/metrics/#balerter_alert_status","text":"This metric contains the current alert statuses. An alert name (id) presents as label name . The metric value present the alert level Success - 1 Warning - 2 Error - 3 An example: balerter_alert_status{name=\"foo\"} 3 balerter_alert_status{name=\"bar\"} 1 balerter_alert_status{name=\"baz\"} 2","title":"balerter_alert_status"},{"location":"configuration/about/","text":"For start Balerter you must provide configuration file. This file contains all datasources, channels, storages and other configuration options. Balerter supports yaml and hcl formats for the configuration file. Names For blocks, which must have name , you must use unique names for each item within sections with repeated items. A correct example: HCL YAML datasources { clickhouse \"db1\" { // ... } clickhouse \"db2\" { // ... } postgres \"db1\" { // ... } postgres \"db2\" { // ... } } datasources : clickhouse : - name : database1 # ... - name : database2 # ... postgres : - name : database1 # ... - name : database2 # ...","title":"about"},{"location":"configuration/about/#names","text":"For blocks, which must have name , you must use unique names for each item within sections with repeated items. A correct example: HCL YAML datasources { clickhouse \"db1\" { // ... } clickhouse \"db2\" { // ... } postgres \"db1\" { // ... } postgres \"db2\" { // ... } } datasources : clickhouse : - name : database1 # ... - name : database2 # ... postgres : - name : database1 # ... - name : database2 # ...","title":"Names"},{"location":"configuration/example/","text":"Config file example HCL YAML config.hcl scripts { updateInterval = 5000 folder \"scripts\" { path = \"/opt/scripts\" mask = \"*.lua\" } file \"demo1\" { filename = \"/path/to/demo.lua\" } } datasources { clickhouse \"ch1\" { host = \"domain.com\" port = 6440 username = \"username\" password = \"password\" database = \"database\" sslCertPath = \"/path/to/cert.crt\" timeout = 3000 } prometheus \"prom1\" { url = \"domain.com\" timeout = 3000 basicAuth { username = \"username\" password = \"password\" } } postgres \"pg1\" { host = \"domain.com\" port = 5432 username = \"username\" password = \"password\" database = \"database\" sslMode = \"verify-full\" sslCertPath = \"/path/to/cert.crt\" timeout = 3000 } mysql \"mysql1\" { dsn = \"user:secret@tcp(127.0.0.1:3306)/database\" timeout = 3000 } loki \"loki1\" { url = \"domain.com\" timeout = 5000 basicAuth { username = \"username\" password = \"password\" } } } channels { slack \"slack-notification\" { token = \"SLACK-APPLICATION-TOKEN\" channel = \"notification\" ignore = false } telegram \"tg1\" { token = \"TELEGRAM-BOT-TOKEN\" chatId = 100500 timeout = 5000 proxy { address = \"10.20.30.40:5060\" auth { username = \"username\" password = \"password\" } } ignore = false } syslog \"default\" { tag = \"balerter\" network = \"tcp\" address = \"127.0.0.1:10515\" priority = \"EMERG|DAEMON\" ignore = false } notify \"default\" { icons { success = \"/path/to/logo-success.png\" error = \"/path/to/logo-error.png\" warning = \"/path/to/logo-warning.png\" } ignore = false } email \"default\" { from = \"foo@bar.com\" to = \"alert@bar.com\" cc = \"alert-cc@bar.com\" host = \"bar.com\" port = 1234 username = \"user\" password = \"secret\" secure = \"ssl\" timeout = 10 ignore = false } discord \"default\" { token = \"ABCD\" channelId = 1234 ignore = false } webhook \"wh1\" { settings { url = \"http://domain.com\" method = \"POST\" auth { type = \"basic\" login = \"user\" password = \"secret\" } payload { queryParams { foo = \"bar\" } body = \"body content\" } timeout = 5000 headers { X-Foo = \"Bar\" } } ignore = false } alertmanager \"am1\" { settings { // webhook settings } ignore = false } alertmanager_receiver \"am2\" { settings { // webhook settings } ignore = false } twilioVoice \"tw1\" { sid = \"ABCD\" token = \"ABCD\" from = \"+11111111111\" to = \"+11111111111\" twiml = \"<Response><Say>{TEXT}</Say></Response>\" ignore = false timeout = 5000 } } storagesCore { sqlite \"mySqliteStorage\" { path = \"/path/to/file\" timeout = 1000 tableKV { table = \"kv\" fields { key = \"key\" value = \"value\" } } tableAlerts { table = \"alerts\" fields { name = \"id\" level = \"level\" count = \"count\" createdAt = \"created_at\" updatedAt = \"updated_at\" } } } postgres \"pg1\" { host = \"domain.com\" port = 5432 username = \"username\" password = \"password\" database = \"database\" sslMode = \"verify-full\" sslCertPath = \"/path/to/cert.crt\" timeout = 3000 tableKV = {} // same as sqlite above tableAlerts = {} // same as sqlite above } } storagesUpload { s 3 \"dev\" { region = \"us-east1\" key = \"SOME_KEY\" secret = \"SOME_SECRET\" endpoint = \"SOME_ENDPOINT\" bucket = \"SOME_BUCKET\" } } api { address = \"127.0.0.1:2000\" serviceAddress = \"127.0.0.1:2001\" } storageAlert = \"memory\" storageKV = \"sqlite.mySqliteStorage\" luaModulesPath = \"./?.lua;./modules/?.lua;./modules/?/init.lua;/modules/?.lua;/modules/?/init.lua\" system { jobWorkersCount = 32 cronLocation = 'UTC' } config.yml scripts : updateInterval : 5000 folder : - name : scripts path : /opt/scripts mask : '*.lua' file : - name : demo1 filename : /path/to/demo.lua datasources : clickhouse : - name : ch1 host : domain.com port : 6440 username : username password : password database : database sslCertPath : /path/to/cert.crt timeout : 3000 prometheus : - name : prom1 url : domain.com timeout : 3000 basicAuth : username : username password : password postgres : - name : pg1 host : domain.com port : 5432 username : username password : password database : database sslMode : verify-full sslCertPath : /path/to/cert.crt timeout : 3000 mysql : - name : mysql1 dsn : user:secret@tcp(127.0.0.1:3306)/database timeout : 3000 loki : - name : loki1 url : domain.com timeout : 5000 basicAuth : username : username password : password channels : slack : - name : slack-notification token : SLACK-APPLICATION-TOKEN channel : notification ignore : false telegram : - name : tg1 token : TELEGRAM-BOT-TOKEN chatId : 100500 timeout : 5000 proxy : address : 10.20.30.40:5060 auth : username : user password : secret ignore : false syslog : - name : default tag : balerter network : tcp address : 127.0.0.1:10515 priority : 'EMERG|DAEMON' ignore : false notify : - name : default icons : success : /path/to/logo-success.png error : /path/to/logo-error.png warning : /path/to/logo-warning.png ignore : false email : - name : default from : foo@bar.com to : alert@bar.com cc : alert-cc@bar.com host : bar.com port : 1234 username : user password : secret secure : ssl timeout : 10 ignore : false discord : - name : default token : 'ABCD' channelId : 1234 ignore : false webhook : - name : wh1 settings : url : http://domain.com method : POST auth : type : basic login : user password : secret payload : queryParams : foo : bar body : body content timeout : 5000 headers : X-Foo : Bar ignore : false alertmanager : - name : am1 settings : # webhook settings ignore : false alertmanager_receiver : - name : am2 settings : # webhook settings ignore : false twilioVoice : - name : tw1 sid : ABCD token : ABCD from : +11111111111 to : +11111111111 twiml : '<Response><Say>{TEXT}</Say></Response>' ignore : false timeout : 5000 storagesCore : sqlite : - name : mySqliteStorage path : /path/to/file timeout : 1000 tableKV : table : \"kv\" fields : key : key value : value tableAlerts : table : \"alerts\" fields : name : id level : level count : count createdAt : created_at updatedAt : updated_at postgres : - name : pg1 host : domain.com port : 5432 username : username password : password database : database sslMode : verify-full sslCertPath : /path/to/cert.crt timeout : 3000 tableKV : # same as sqlite above tableAlerts : # same as sqlite above storagesUpload : s3 : - name : dev region : us-east1 key : SOME_KEY secret : SOME_SECRET endpoint : SOME_ENDPOINT bucket : SOME_BUCKET api : address : 127.0.0.1:2000 serviceAddress : 127.0.0.1:2001 storageAlert : memory storageKV : sqlite.mySqliteStorage luaModulesPath : ./?.lua;./modules/?.lua;./modules/?/init.lua;/modules/?.lua;/modules/?/init.lua system : jobWorkersCount : 32 cronLocation : 'UTC'","title":"example"},{"location":"configuration/secrets/","text":"Secrets You can use secrets in your configuration file. Supported secret engines: env vault Format {secret:<ENGINE>:<KEY>} For the env engine key is the environment variable name For the vault engine key should look as path/to/secret@field_name You can use env variables for vault connection BALERTER_VAULT_URL BALERTER_VAULT_TOKEN BALERTER_VAULT_NAMESPACE (optional) An example HCL YAML channels { telegram \"tg1\" { token = \"{secret:env:TELEGRAM_TOKEN}\" chatId = 100500 } telegram \"tg2\" { token = \"{secret:vault:secret/data/telegram@token}\" chatId = 100500 } } channels : telegram : - name : tg1 token : \"{secret:env:TELEGRAM_TOKEN}\" chatId : 100500 - name : tg2 token : \"{secret:vault:secret/data/telegram@token}\" chatId : 100500","title":"secrets"},{"location":"configuration/secrets/#secrets","text":"You can use secrets in your configuration file. Supported secret engines: env vault","title":"Secrets"},{"location":"configuration/secrets/#format","text":"{secret:<ENGINE>:<KEY>} For the env engine key is the environment variable name For the vault engine key should look as path/to/secret@field_name You can use env variables for vault connection BALERTER_VAULT_URL BALERTER_VAULT_TOKEN BALERTER_VAULT_NAMESPACE (optional)","title":"Format"},{"location":"configuration/secrets/#an-example","text":"HCL YAML channels { telegram \"tg1\" { token = \"{secret:env:TELEGRAM_TOKEN}\" chatId = 100500 } telegram \"tg2\" { token = \"{secret:vault:secret/data/telegram@token}\" chatId = 100500 } } channels : telegram : - name : tg1 token : \"{secret:env:TELEGRAM_TOKEN}\" chatId : 100500 - name : tg2 token : \"{secret:vault:secret/data/telegram@token}\" chatId : 100500","title":"An example"},{"location":"configuration/sections/api/","text":"HCL YAML api { address = \"127.0.0.1:2000\" serviceAddress = \"127.0.0.1:2001\" coreApi { address = \"127.0.0.1:2200\" authToken = \"xxx\" } } api : address : 127.0.0.1:2000 serviceAddress : 127.0.0.1:2001 coreApi : address : 127.0.0.1:2200 authToken : xxx address By default: empty (disabled) If defined, API handler will be run on this address serviceAddress By default: empty (disabled) If serviceAddress is defined, balerter will be listening this address. /metrics route for prometheus metrics (see more about metrics ) / and /liveness you can use for liveness checks. It always returns ok with 200 status code Also pprof routes will be run on this address: /debug/pprof/profile /debug/pprof/trace /debug/pprof/heap /debug/pprof/goroutine /debug/pprof/allocs coreApi If Core API address is defined, balerter will run Core API server on this address. If authToken is defined, it will be used for authentication. Read more about Core API","title":"api"},{"location":"configuration/sections/api/#address","text":"By default: empty (disabled) If defined, API handler will be run on this address","title":"address"},{"location":"configuration/sections/api/#serviceaddress","text":"By default: empty (disabled) If serviceAddress is defined, balerter will be listening this address. /metrics route for prometheus metrics (see more about metrics ) / and /liveness you can use for liveness checks. It always returns ok with 200 status code Also pprof routes will be run on this address: /debug/pprof/profile /debug/pprof/trace /debug/pprof/heap /debug/pprof/goroutine /debug/pprof/allocs","title":"serviceAddress"},{"location":"configuration/sections/api/#coreapi","text":"If Core API address is defined, balerter will run Core API server on this address. If authToken is defined, it will be used for authentication. Read more about Core API","title":"coreApi"},{"location":"configuration/sections/channels/","text":"Section channels describes the channels that are available for send notifications. Supported channels: slack telegram syslog notify email discord webhook alertmanager alertmanager receiver twilio voice log Slack HCL YAML slack \"slack-notification\" { token = \"SLACK-APPLICATION-TOKEN\" channel = \"notification\" ignore = false } slack : - name : slack-notification token : SLACK-APPLICATION-TOKEN channel : notification name string Required, Unique Channel name token string Required Slack application token channel string Required Slack channel ignore bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options Telegram HCL YAML telegram \"tg1\" { token = \"TELEGRAM-BOT-TOKEN\" chatId = 100500 timeout = 5000 proxy { address = \"10.20.30.40:5060\" auth { username = \"username\" password = \"password\" } } ignore = false } telegram : - name : tg1 token : TELEGRAM-BOT-TOKEN chatId : 100500 timeout : 5000 proxy : address : 10.20.30.40:5060 auth : username : user password : secret ignore : false name string Required, Unique Channel name token string Required Telegram bot API token chatId int Required Chat ID timeout int By default: 5000 (5 sec) timeout in milliseconds proxy Socks5 proxy settings If auth section is defined, it will use for authentication ignore bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options Syslog JSON marshalled messaged will be send to syslog server HCL YAML syslog \"default\" { tag = \"balerter\" network = \"tcp\" address = \"127.0.0.1:10515\" priority = \"EMERG|DAEMON\" ignore = false } syslog : - name : default tag : balerter network : tcp address : 127.0.0.1:10515 priority : EMERG|DAEMON ignore : false name string Required, Unique Channel name tag string Syslog tag network string Network type - udp - tcp - empty string for use local syslog server address string Server address priority string Default: EMERG Message priority Format: <SEVERITY>[|<FACILITI>] Severity: EMERG ALERT CRIT ERR WARNING NOTICE INFO DEBUG Facility: KERN USER MAIL DAEMON AUTH SYSLOG LPR NEWS UUCP CRON AUTHPRIV FTP LOCAL0 LOCAL1 LOCAL2 LOCAL3 LOCAL4 LOCAL5 LOCAL6 For example: priority : 'ALERT' priority : 'ALERT|USER' priority : 'INFO|LOCAL0' ignore bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options Notify Send standard OS GUI notification HCL YAML notify \"default\" { icons { success = \"/path/to/logo-success.png\" error = \"/path/to/logo-error.png\" warning = \"/path/to/logo-warning.png\" } ignore = false } notify : - name : default icons : success : /path/to/logo-success.png error : /path/to/logo-error.png warning : /path/to/logo-warning.png ignore : false name string Required, Unique Channel name icons success error warning string Path to images (use as notification icons) ignore bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options Email HCL YAML email \"default\" { from = \"foo@bar.com\" to = \"alert@bar.com\" cc = \"alert-cc@bar.com\" host = \"bar.com\" port = 1234 username = \"user\" password = \"secret\" secure = \"ssl\" timeout = 10 ignore = false } email : - name : default from : foo@bar.com to : alert@bar.com cc : alert-cc@bar.com host : bar.com port : 1234 username : user password : secret secure : ssl timeout : 1000 ignore : false name string Required, Unique Channel name from string Field 'from' to string Field 'to' cc string Field 'cc' host string Hostname port int Port If Port equals to '465' and Secure field is empty, Secure filed will be set to 'ssl' username string Username password string Password secure string none , ssl , tls or empty string timeout int timeout in seconds. By default - 10 sec. ignore bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options Discord HCL YAML discord \"default\" { token = \"ABCD\" channelId = 1234 ignore = false } discord : - name : default token : ABCD channelId : 1234 ignore : false name string Required, Unique Channel name token string Token channelID int Channel ID ignore bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options Webhook HCL YAML webhook \"wh1\" { settings { url = \"http://domain.com\" method = \"POST\" auth { type = \"basic\" login = \"user\" password = \"secret\" } payload { queryParams { foo = \"bar\" } body = \"body $text content\" } timeout = 5000 headers { X-Foo = \"Bar\" } } ignore = false } webhook : - name : wh1 settings : url : http://domain.com method : POST auth : type : basic login : user password : secret payload : queryParams : foo : bar body : body $text content timeout : 5000 headers : X-Foo : Bar ignore : false When you provide text in payload.body , you can use macros: $level $alert_name $text $image $fields name string Required, Unique settings.url Required, URL Webhook URL settings.method By default: POST HTTP method settings.auth Type must be none , basic , bearer or custom . By default: none (empty string) Authentication data. Depending on the type: type: basic Should be not empty: - settings.auth.login - settings.auth.password type: bearer Should be not empty: - settings.auth.token settings.payload.body POST body. Must be defined with method=POST settings.payload.queryParams String=String pairs for set query params settings.timeout (time interval) By default: 3000 Timeout in milliseconds settings.headers String=String pairs for set HTTP request headers ignore bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options Alertmanager TODO: links to - alertmanager docs - manual for balerter-alertmanager communications HCL YAML alertmanager \"am1\" { settings { // webhook settings } ignore = false } alertmanager : - name : am1 settings : # webhook settings ignore : false name string Required, Unique settings See webhook settings ignore bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options alertmanager receiver TODO: links to - alertmanager-receiver docs - manual for balerter-alertmanager_receiver communications HCL YAML alertmanager_receiver \"am2\" { settings { // webhook settings } ignore = false } alertmanager_receiver : - name : am2 settings : # webhook settings ignore : false name string Required, Unique settings See webhook settings ignore bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options twilio voice TwilioVoice channel allows you to make voice calls on change alert status https://www.twilio.com/ HCL YAML twilioVoice \"tw1\" { sid = \"ABCD\" token = \"ABCD\" from = \"+11111111111\" to = \"+11111111111\" twiml = \"<Response><Say>{TEXT}</Say></Response>\" ignore = false timeout = 5000 } twilioVoice : - name : tw1 sid : ABCD token : ABCD from : +11111111111 to : +11111111111 twiml : '<Response><Say>{TEXT}</Say></Response>' ignore : false timeout : 5000 name string Required, Unique sid string Required Your SID from the Twilio console token string Your Token from the Twilio console from string Sender phone number to string Your phone number twiml string TwiML template. You can to specify the macros {TEXT} , which will be replaced to alert text. If this option is empty, alert text will be placed as TwiML template ignore bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options timeout int Default: 30000 (30s) HTTP request timeout, milliseconds log Log channel allows you to print your alerts to the console with Info level HCL YAML log \"log1\" { ignore = false } log : - name : lg1 ignore : false name string Required, Unique ignore bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options","title":"channels"},{"location":"configuration/sections/channels/#slack","text":"HCL YAML slack \"slack-notification\" { token = \"SLACK-APPLICATION-TOKEN\" channel = \"notification\" ignore = false } slack : - name : slack-notification token : SLACK-APPLICATION-TOKEN channel : notification","title":"Slack"},{"location":"configuration/sections/channels/#name","text":"string Required, Unique Channel name","title":"name"},{"location":"configuration/sections/channels/#token","text":"string Required Slack application token","title":"token"},{"location":"configuration/sections/channels/#channel","text":"string Required Slack channel","title":"channel"},{"location":"configuration/sections/channels/#ignore","text":"bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options","title":"ignore"},{"location":"configuration/sections/channels/#telegram","text":"HCL YAML telegram \"tg1\" { token = \"TELEGRAM-BOT-TOKEN\" chatId = 100500 timeout = 5000 proxy { address = \"10.20.30.40:5060\" auth { username = \"username\" password = \"password\" } } ignore = false } telegram : - name : tg1 token : TELEGRAM-BOT-TOKEN chatId : 100500 timeout : 5000 proxy : address : 10.20.30.40:5060 auth : username : user password : secret ignore : false","title":"Telegram"},{"location":"configuration/sections/channels/#name_1","text":"string Required, Unique Channel name","title":"name"},{"location":"configuration/sections/channels/#token_1","text":"string Required Telegram bot API token","title":"token"},{"location":"configuration/sections/channels/#chatid","text":"int Required Chat ID","title":"chatId"},{"location":"configuration/sections/channels/#timeout","text":"int By default: 5000 (5 sec) timeout in milliseconds","title":"timeout"},{"location":"configuration/sections/channels/#proxy","text":"Socks5 proxy settings If auth section is defined, it will use for authentication","title":"proxy"},{"location":"configuration/sections/channels/#ignore_1","text":"bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options","title":"ignore"},{"location":"configuration/sections/channels/#syslog","text":"JSON marshalled messaged will be send to syslog server HCL YAML syslog \"default\" { tag = \"balerter\" network = \"tcp\" address = \"127.0.0.1:10515\" priority = \"EMERG|DAEMON\" ignore = false } syslog : - name : default tag : balerter network : tcp address : 127.0.0.1:10515 priority : EMERG|DAEMON ignore : false","title":"Syslog"},{"location":"configuration/sections/channels/#name_2","text":"string Required, Unique Channel name","title":"name"},{"location":"configuration/sections/channels/#tag","text":"string Syslog tag","title":"tag"},{"location":"configuration/sections/channels/#network","text":"string Network type - udp - tcp - empty string for use local syslog server","title":"network"},{"location":"configuration/sections/channels/#address","text":"string Server address","title":"address"},{"location":"configuration/sections/channels/#priority","text":"string Default: EMERG Message priority Format: <SEVERITY>[|<FACILITI>] Severity: EMERG ALERT CRIT ERR WARNING NOTICE INFO DEBUG Facility: KERN USER MAIL DAEMON AUTH SYSLOG LPR NEWS UUCP CRON AUTHPRIV FTP LOCAL0 LOCAL1 LOCAL2 LOCAL3 LOCAL4 LOCAL5 LOCAL6 For example: priority : 'ALERT' priority : 'ALERT|USER' priority : 'INFO|LOCAL0'","title":"priority"},{"location":"configuration/sections/channels/#ignore_2","text":"bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options","title":"ignore"},{"location":"configuration/sections/channels/#notify","text":"Send standard OS GUI notification HCL YAML notify \"default\" { icons { success = \"/path/to/logo-success.png\" error = \"/path/to/logo-error.png\" warning = \"/path/to/logo-warning.png\" } ignore = false } notify : - name : default icons : success : /path/to/logo-success.png error : /path/to/logo-error.png warning : /path/to/logo-warning.png ignore : false","title":"Notify"},{"location":"configuration/sections/channels/#name_3","text":"string Required, Unique Channel name","title":"name"},{"location":"configuration/sections/channels/#icons","text":"success error warning string Path to images (use as notification icons)","title":"icons"},{"location":"configuration/sections/channels/#ignore_3","text":"bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options","title":"ignore"},{"location":"configuration/sections/channels/#email","text":"HCL YAML email \"default\" { from = \"foo@bar.com\" to = \"alert@bar.com\" cc = \"alert-cc@bar.com\" host = \"bar.com\" port = 1234 username = \"user\" password = \"secret\" secure = \"ssl\" timeout = 10 ignore = false } email : - name : default from : foo@bar.com to : alert@bar.com cc : alert-cc@bar.com host : bar.com port : 1234 username : user password : secret secure : ssl timeout : 1000 ignore : false","title":"Email"},{"location":"configuration/sections/channels/#name_4","text":"string Required, Unique Channel name","title":"name"},{"location":"configuration/sections/channels/#from","text":"string Field 'from'","title":"from"},{"location":"configuration/sections/channels/#to","text":"string Field 'to'","title":"to"},{"location":"configuration/sections/channels/#cc","text":"string Field 'cc'","title":"cc"},{"location":"configuration/sections/channels/#host","text":"string Hostname","title":"host"},{"location":"configuration/sections/channels/#port","text":"int Port If Port equals to '465' and Secure field is empty, Secure filed will be set to 'ssl'","title":"port"},{"location":"configuration/sections/channels/#username","text":"string Username","title":"username"},{"location":"configuration/sections/channels/#password","text":"string Password","title":"password"},{"location":"configuration/sections/channels/#secure","text":"string none , ssl , tls or empty string","title":"secure"},{"location":"configuration/sections/channels/#timeout_1","text":"int timeout in seconds. By default - 10 sec.","title":"timeout"},{"location":"configuration/sections/channels/#ignore_4","text":"bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options","title":"ignore"},{"location":"configuration/sections/channels/#discord","text":"HCL YAML discord \"default\" { token = \"ABCD\" channelId = 1234 ignore = false } discord : - name : default token : ABCD channelId : 1234 ignore : false","title":"Discord"},{"location":"configuration/sections/channels/#name_5","text":"string Required, Unique Channel name","title":"name"},{"location":"configuration/sections/channels/#token_2","text":"string Token","title":"token"},{"location":"configuration/sections/channels/#channelid","text":"int Channel ID","title":"channelID"},{"location":"configuration/sections/channels/#ignore_5","text":"bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options","title":"ignore"},{"location":"configuration/sections/channels/#webhook","text":"HCL YAML webhook \"wh1\" { settings { url = \"http://domain.com\" method = \"POST\" auth { type = \"basic\" login = \"user\" password = \"secret\" } payload { queryParams { foo = \"bar\" } body = \"body $text content\" } timeout = 5000 headers { X-Foo = \"Bar\" } } ignore = false } webhook : - name : wh1 settings : url : http://domain.com method : POST auth : type : basic login : user password : secret payload : queryParams : foo : bar body : body $text content timeout : 5000 headers : X-Foo : Bar ignore : false When you provide text in payload.body , you can use macros: $level $alert_name $text $image $fields","title":"Webhook"},{"location":"configuration/sections/channels/#name_6","text":"string Required, Unique","title":"name"},{"location":"configuration/sections/channels/#settingsurl","text":"Required, URL Webhook URL","title":"settings.url"},{"location":"configuration/sections/channels/#settingsmethod","text":"By default: POST HTTP method","title":"settings.method"},{"location":"configuration/sections/channels/#settingsauth","text":"Type must be none , basic , bearer or custom . By default: none (empty string) Authentication data. Depending on the type:","title":"settings.auth"},{"location":"configuration/sections/channels/#type-basic","text":"Should be not empty: - settings.auth.login - settings.auth.password","title":"type: basic"},{"location":"configuration/sections/channels/#type-bearer","text":"Should be not empty: - settings.auth.token","title":"type: bearer"},{"location":"configuration/sections/channels/#settingspayloadbody","text":"POST body. Must be defined with method=POST","title":"settings.payload.body"},{"location":"configuration/sections/channels/#settingspayloadqueryparams","text":"String=String pairs for set query params","title":"settings.payload.queryParams"},{"location":"configuration/sections/channels/#settingstimeout-time-interval","text":"By default: 3000 Timeout in milliseconds","title":"settings.timeout (time interval)"},{"location":"configuration/sections/channels/#settingsheaders","text":"String=String pairs for set HTTP request headers","title":"settings.headers"},{"location":"configuration/sections/channels/#ignore_6","text":"bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options","title":"ignore"},{"location":"configuration/sections/channels/#alertmanager","text":"TODO: links to - alertmanager docs - manual for balerter-alertmanager communications HCL YAML alertmanager \"am1\" { settings { // webhook settings } ignore = false } alertmanager : - name : am1 settings : # webhook settings ignore : false","title":"Alertmanager"},{"location":"configuration/sections/channels/#name_7","text":"string Required, Unique","title":"name"},{"location":"configuration/sections/channels/#settings","text":"See webhook settings","title":"settings"},{"location":"configuration/sections/channels/#ignore_7","text":"bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options","title":"ignore"},{"location":"configuration/sections/channels/#alertmanager-receiver","text":"TODO: links to - alertmanager-receiver docs - manual for balerter-alertmanager_receiver communications HCL YAML alertmanager_receiver \"am2\" { settings { // webhook settings } ignore = false } alertmanager_receiver : - name : am2 settings : # webhook settings ignore : false","title":"alertmanager receiver"},{"location":"configuration/sections/channels/#name_8","text":"string Required, Unique","title":"name"},{"location":"configuration/sections/channels/#settings_1","text":"See webhook settings","title":"settings"},{"location":"configuration/sections/channels/#ignore_8","text":"bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options","title":"ignore"},{"location":"configuration/sections/channels/#twilio-voice","text":"TwilioVoice channel allows you to make voice calls on change alert status https://www.twilio.com/ HCL YAML twilioVoice \"tw1\" { sid = \"ABCD\" token = \"ABCD\" from = \"+11111111111\" to = \"+11111111111\" twiml = \"<Response><Say>{TEXT}</Say></Response>\" ignore = false timeout = 5000 } twilioVoice : - name : tw1 sid : ABCD token : ABCD from : +11111111111 to : +11111111111 twiml : '<Response><Say>{TEXT}</Say></Response>' ignore : false timeout : 5000","title":"twilio voice"},{"location":"configuration/sections/channels/#name_9","text":"string Required, Unique","title":"name"},{"location":"configuration/sections/channels/#sid","text":"string Required Your SID from the Twilio console","title":"sid"},{"location":"configuration/sections/channels/#token_3","text":"string Your Token from the Twilio console","title":"token"},{"location":"configuration/sections/channels/#from_1","text":"string Sender phone number","title":"from"},{"location":"configuration/sections/channels/#to_1","text":"string Your phone number","title":"to"},{"location":"configuration/sections/channels/#twiml","text":"string TwiML template. You can to specify the macros {TEXT} , which will be replaced to alert text. If this option is empty, alert text will be placed as TwiML template","title":"twiml"},{"location":"configuration/sections/channels/#ignore_9","text":"bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options","title":"ignore"},{"location":"configuration/sections/channels/#timeout_2","text":"int Default: 30000 (30s) HTTP request timeout, milliseconds","title":"timeout"},{"location":"configuration/sections/channels/#log","text":"Log channel allows you to print your alerts to the console with Info level HCL YAML log \"log1\" { ignore = false } log : - name : lg1 ignore : false","title":"log"},{"location":"configuration/sections/channels/#name_10","text":"string Required, Unique","title":"name"},{"location":"configuration/sections/channels/#ignore_10","text":"bool Default: false If this option is True, this channel will be ignored by default. This option will be ignored if you explicitly define the channel in your script meta-tags or alert options","title":"ignore"},{"location":"configuration/sections/datasources/","text":"Section datasources defines data sources connections that are available for the Balerter. Supported data sources: clickhouse prometheus postgres loki mysql Clickhouse HCL YAML clickhouse \"ch1\" { host = \"domain.com\" port = 6440 username = \"username\" password = \"password\" database = \"database\" sslCertPath = \"/path/to/cert.crt\" timeout = 3000 } clickhouse : - name : ch1 host : domain.com port : 6440 username : username password : password database : database sslCertPath : /path/to/cert.crt timeout : 3000 name string Required, Unique Datasource name This name uses for connect to datasource from scripts. For example : script.lua local ds = require ( 'datasource.clickhouse.ch1' ) host string Required Connection host port int By default: 6440 Connection port username string By default: default Connection username password string Connection password database string By default: default Connection database sslCertPath string Path to SSL cert. If empty, SSL do not use timeout int By default: 5000 (5 sec) Timeout, milliseconds Prometheus HCL YAML prometheus \"prom1\" { url = \"domain.com\" timeout = 3000 basicAuth { username = \"username\" password = \"password\" } } prometheus : - name : prom1 url : domain.com timeout : 3000 basicAuth : username : username password : password name string Required, Unique Datasource name script.lua local ds = require ( 'datasource.prometheus.prom1' ) url string Required Request URI. API path /api/v1/... will be added basicAuth Username and password, if Prometheus require Basic Auth timeout int By default: 5000 (5 sec) timeout, milliseconds Postgres HCL YAML postgres \"pg1\" { host = \"domain.com\" port = 5432 username = \"username\" password = \"password\" database = \"database\" sslMode = \"verify-full\" sslCertPath = \"/path/to/cert.crt\" timeout = 3000 } postgres : - name : pg1 host : domain.com port : 5432 username : username password : password database : database sslMode : verify-full sslCertPath : /path/to/cert.crt timeout : 3000 name string Required, Unique Datasource name script.lua local ds = require ( 'datasource.postgres.pg1' ) host string Required Connection host port int By default: 5432 Connection port username string By default: postgres Connection username password string By default: postgres Connection password database string By default: postgres Connection database sslMode string By default disable SSL mode sslCertPath string Path to SSL cert timeout int By default: 5000 (5 sec) timeout, milliseconds Loki HCL YAML loki \"loki1\" { url = \"domain.com\" timeout = 5000 basicAuth { username = \"username\" password = \"password\" } } loki : - name : loki1 url : domain.com timeout : 5000 basicAuth : username : username password : password name string Required, Unique Datasource name script.lua local ds = require ( 'datasource.loki.loki1' ) url string Required Request URI. API path /api/v1/... will be added timeout int By default: 5000 (5 sec) timeout, milliseconds basicAuth Username and password, if Loki require Basic Auth MySQL HCL YAML mysql \"mysql1\" { dsn = \"user:secret@tcp(127.0.0.1:3306)/database\" timeout = 3000 } mysql : - name : mysql1 dsn : user:secret@tcp(127.0.0.1:3306)/database timeout : 3000 name string Required, Unique Datasource name script.lua local ds = require ( 'datasource.postgres.mysql1' ) dsn string Required DSN (Data Source Name) for connect to DB Format: [username[:password]@][protocol[(address)]]/dbname[?param1=value1&...&paramN=valueN] An example: user:secret@tcp(127.0.0.1:3306)/db golang packge for more information about DSN timeout int By default: 5000 (5 sec) timeout, milliseconds","title":"datasources"},{"location":"configuration/sections/datasources/#clickhouse","text":"HCL YAML clickhouse \"ch1\" { host = \"domain.com\" port = 6440 username = \"username\" password = \"password\" database = \"database\" sslCertPath = \"/path/to/cert.crt\" timeout = 3000 } clickhouse : - name : ch1 host : domain.com port : 6440 username : username password : password database : database sslCertPath : /path/to/cert.crt timeout : 3000","title":"Clickhouse"},{"location":"configuration/sections/datasources/#name","text":"string Required, Unique Datasource name This name uses for connect to datasource from scripts. For example : script.lua local ds = require ( 'datasource.clickhouse.ch1' )","title":"name"},{"location":"configuration/sections/datasources/#host","text":"string Required Connection host","title":"host"},{"location":"configuration/sections/datasources/#port","text":"int By default: 6440 Connection port","title":"port"},{"location":"configuration/sections/datasources/#username","text":"string By default: default Connection username","title":"username"},{"location":"configuration/sections/datasources/#password","text":"string Connection password","title":"password"},{"location":"configuration/sections/datasources/#database","text":"string By default: default Connection database","title":"database"},{"location":"configuration/sections/datasources/#sslcertpath","text":"string Path to SSL cert. If empty, SSL do not use","title":"sslCertPath"},{"location":"configuration/sections/datasources/#timeout","text":"int By default: 5000 (5 sec) Timeout, milliseconds","title":"timeout"},{"location":"configuration/sections/datasources/#prometheus","text":"HCL YAML prometheus \"prom1\" { url = \"domain.com\" timeout = 3000 basicAuth { username = \"username\" password = \"password\" } } prometheus : - name : prom1 url : domain.com timeout : 3000 basicAuth : username : username password : password","title":"Prometheus"},{"location":"configuration/sections/datasources/#name_1","text":"string Required, Unique Datasource name script.lua local ds = require ( 'datasource.prometheus.prom1' )","title":"name"},{"location":"configuration/sections/datasources/#url","text":"string Required Request URI. API path /api/v1/... will be added","title":"url"},{"location":"configuration/sections/datasources/#basicauth","text":"Username and password, if Prometheus require Basic Auth","title":"basicAuth"},{"location":"configuration/sections/datasources/#timeout_1","text":"int By default: 5000 (5 sec) timeout, milliseconds","title":"timeout"},{"location":"configuration/sections/datasources/#postgres","text":"HCL YAML postgres \"pg1\" { host = \"domain.com\" port = 5432 username = \"username\" password = \"password\" database = \"database\" sslMode = \"verify-full\" sslCertPath = \"/path/to/cert.crt\" timeout = 3000 } postgres : - name : pg1 host : domain.com port : 5432 username : username password : password database : database sslMode : verify-full sslCertPath : /path/to/cert.crt timeout : 3000","title":"Postgres"},{"location":"configuration/sections/datasources/#name_2","text":"string Required, Unique Datasource name script.lua local ds = require ( 'datasource.postgres.pg1' )","title":"name"},{"location":"configuration/sections/datasources/#host_1","text":"string Required Connection host","title":"host"},{"location":"configuration/sections/datasources/#port_1","text":"int By default: 5432 Connection port","title":"port"},{"location":"configuration/sections/datasources/#username_1","text":"string By default: postgres Connection username","title":"username"},{"location":"configuration/sections/datasources/#password_1","text":"string By default: postgres Connection password","title":"password"},{"location":"configuration/sections/datasources/#database_1","text":"string By default: postgres Connection database","title":"database"},{"location":"configuration/sections/datasources/#sslmode","text":"string By default disable SSL mode","title":"sslMode"},{"location":"configuration/sections/datasources/#sslcertpath_1","text":"string Path to SSL cert","title":"sslCertPath"},{"location":"configuration/sections/datasources/#timeout_2","text":"int By default: 5000 (5 sec) timeout, milliseconds","title":"timeout"},{"location":"configuration/sections/datasources/#loki","text":"HCL YAML loki \"loki1\" { url = \"domain.com\" timeout = 5000 basicAuth { username = \"username\" password = \"password\" } } loki : - name : loki1 url : domain.com timeout : 5000 basicAuth : username : username password : password","title":"Loki"},{"location":"configuration/sections/datasources/#name_3","text":"string Required, Unique Datasource name script.lua local ds = require ( 'datasource.loki.loki1' )","title":"name"},{"location":"configuration/sections/datasources/#url_1","text":"string Required Request URI. API path /api/v1/... will be added","title":"url"},{"location":"configuration/sections/datasources/#timeout_3","text":"int By default: 5000 (5 sec) timeout, milliseconds","title":"timeout"},{"location":"configuration/sections/datasources/#basicauth_1","text":"Username and password, if Loki require Basic Auth","title":"basicAuth"},{"location":"configuration/sections/datasources/#mysql","text":"HCL YAML mysql \"mysql1\" { dsn = \"user:secret@tcp(127.0.0.1:3306)/database\" timeout = 3000 } mysql : - name : mysql1 dsn : user:secret@tcp(127.0.0.1:3306)/database timeout : 3000","title":"MySQL"},{"location":"configuration/sections/datasources/#name_4","text":"string Required, Unique Datasource name script.lua local ds = require ( 'datasource.postgres.mysql1' )","title":"name"},{"location":"configuration/sections/datasources/#dsn","text":"string Required DSN (Data Source Name) for connect to DB Format: [username[:password]@][protocol[(address)]]/dbname[?param1=value1&...&paramN=valueN] An example: user:secret@tcp(127.0.0.1:3306)/db golang packge for more information about DSN","title":"dsn"},{"location":"configuration/sections/datasources/#timeout_4","text":"int By default: 5000 (5 sec) timeout, milliseconds","title":"timeout"},{"location":"configuration/sections/root/","text":"These options are not required and can be defined in the configuration file on top level HCL YAML luaModulesPath = \"./?.lua\" storageAlert = \"memory\" storageKV = \"memory\" luaModulesPath : ./?.lua storageAlert : \"memory\" storageKV : \"memory\" luaModulesPath string By default: ./?.lua;./modules/?.lua;./modules/?/init.lua;/modules/?.lua;/modules/?/init.lua Semicolon separated list of paths to load lua modules from. storages Storage settings for core-modules. You should set storage name, described in section core storages . Use a format: <STORAGE_TYPE>.<STORAGE_NAME> . Except for builtin storage - memory By default for all modules uses builtin value - memory alert: storage for Alerts data kv: storage for KV data Example: HCL YAML storageAlert = \"sqlite.mySqliteStorage\" storageAlert : sqlite.mySqliteStorage","title":"root values"},{"location":"configuration/sections/root/#luamodulespath","text":"string By default: ./?.lua;./modules/?.lua;./modules/?/init.lua;/modules/?.lua;/modules/?/init.lua Semicolon separated list of paths to load lua modules from.","title":"luaModulesPath"},{"location":"configuration/sections/root/#storages","text":"Storage settings for core-modules. You should set storage name, described in section core storages . Use a format: <STORAGE_TYPE>.<STORAGE_NAME> . Except for builtin storage - memory By default for all modules uses builtin value - memory alert: storage for Alerts data kv: storage for KV data Example: HCL YAML storageAlert = \"sqlite.mySqliteStorage\" storageAlert : sqlite.mySqliteStorage","title":"storages"},{"location":"configuration/sections/scripts/","text":"Section scripts describes scripts sources. You can to define any number of scripts sources any types Example HCL YAML scripts { updateInterval = 5000 folder \"scripts\" { path = \"/opt/scripts\" mask = \"*.lua\" } file \"demo1\" { filename = \"/path/to/demo.lua\" disableIgnore = false } postgres \"pg1\" { host = \"domain.com\" port = 5432 username = \"username\" password = \"password\" database = \"database\" sslMode = \"verify-full\" sslCertPath = \"/path/to/cert.crt\" query = \"SELECT name, body FROM scripts\" } } scripts : updateInterval : 30000 folder : - name : scripts path : /opt/scripts mask : '*.lua' file : - name : demo1 filename : /path/to/demo.lua disableIgnore : false postgres : - name : pg1 host : domain.com port : 5432 username : username password : password database : database sslMode : verify-full sslCertPath : /path/to/cert.crt timeout : 3000 query : \"SELECT name, body FROM scripts\" Common updateInterval int By default: 60000 (1 minute) An interval for check changes in script sources, milliseconds. Type file HCL YAML file \"demo1\" { filename = \"/path/to/demo.lua\" disableIgnore = false } file : - name : scripts filename : /opt/scripts/demo.lua disableIgnore : false name string Required, Unique Script source name filename string Required Path to the script disableIgnore bool By default: false If true , meta-tag @ignore will be ignored Type folder HCL YAML folder \"scripts\" { path = \"/opt/scripts\" mask = \"*.lua\" } folder : - name : scripts path : /opt/scripts mask : '*.lua' name string Required, Unique Script source name path string Required Path to folder mask string By default: *.lua File mask Type postgres HCL YAML postgres \"pg1\" { host = \"domain.com\" port = 5432 username = \"username\" password = \"password\" database = \"database\" sslMode = \"verify-full\" sslCertPath = \"/path/to/cert.crt\" query = \"SELECT name, body FROM scripts\" } postgres : - name : pg1 host : domain.com port : 5432 username : username password : password database : database sslMode : verify-full sslCertPath : /path/to/cert.crt timeout : 3000 query : \"SELECT name, body FROM scripts\" name string Required, Unique Script source name host string Required Connection host port int By default: 5432 Connection port username string By default: postgres Connection username password string By default: postgres Connection password database string By default: postgres Connection database sslMode string By default disable SSL mode sslCertPath string By default: empty string Path to SSL cert timeout int By default: 5000 timeout, milliseconds query string Query for scripts select. You must return exactly two string fields! First field for script name, and second field for script body. Example: SELECT name , body FROM scripts","title":"scripts"},{"location":"configuration/sections/scripts/#example","text":"HCL YAML scripts { updateInterval = 5000 folder \"scripts\" { path = \"/opt/scripts\" mask = \"*.lua\" } file \"demo1\" { filename = \"/path/to/demo.lua\" disableIgnore = false } postgres \"pg1\" { host = \"domain.com\" port = 5432 username = \"username\" password = \"password\" database = \"database\" sslMode = \"verify-full\" sslCertPath = \"/path/to/cert.crt\" query = \"SELECT name, body FROM scripts\" } } scripts : updateInterval : 30000 folder : - name : scripts path : /opt/scripts mask : '*.lua' file : - name : demo1 filename : /path/to/demo.lua disableIgnore : false postgres : - name : pg1 host : domain.com port : 5432 username : username password : password database : database sslMode : verify-full sslCertPath : /path/to/cert.crt timeout : 3000 query : \"SELECT name, body FROM scripts\"","title":"Example"},{"location":"configuration/sections/scripts/#common","text":"","title":"Common"},{"location":"configuration/sections/scripts/#updateinterval","text":"int By default: 60000 (1 minute) An interval for check changes in script sources, milliseconds.","title":"updateInterval"},{"location":"configuration/sections/scripts/#type-file","text":"HCL YAML file \"demo1\" { filename = \"/path/to/demo.lua\" disableIgnore = false } file : - name : scripts filename : /opt/scripts/demo.lua disableIgnore : false","title":"Type file"},{"location":"configuration/sections/scripts/#name","text":"string Required, Unique Script source name","title":"name"},{"location":"configuration/sections/scripts/#filename","text":"string Required Path to the script","title":"filename"},{"location":"configuration/sections/scripts/#disableignore","text":"bool By default: false If true , meta-tag @ignore will be ignored","title":"disableIgnore"},{"location":"configuration/sections/scripts/#type-folder","text":"HCL YAML folder \"scripts\" { path = \"/opt/scripts\" mask = \"*.lua\" } folder : - name : scripts path : /opt/scripts mask : '*.lua'","title":"Type folder"},{"location":"configuration/sections/scripts/#name_1","text":"string Required, Unique Script source name","title":"name"},{"location":"configuration/sections/scripts/#path","text":"string Required Path to folder","title":"path"},{"location":"configuration/sections/scripts/#mask","text":"string By default: *.lua File mask","title":"mask"},{"location":"configuration/sections/scripts/#type-postgres","text":"HCL YAML postgres \"pg1\" { host = \"domain.com\" port = 5432 username = \"username\" password = \"password\" database = \"database\" sslMode = \"verify-full\" sslCertPath = \"/path/to/cert.crt\" query = \"SELECT name, body FROM scripts\" } postgres : - name : pg1 host : domain.com port : 5432 username : username password : password database : database sslMode : verify-full sslCertPath : /path/to/cert.crt timeout : 3000 query : \"SELECT name, body FROM scripts\"","title":"Type postgres"},{"location":"configuration/sections/scripts/#name_2","text":"string Required, Unique Script source name","title":"name"},{"location":"configuration/sections/scripts/#host","text":"string Required Connection host","title":"host"},{"location":"configuration/sections/scripts/#port","text":"int By default: 5432 Connection port","title":"port"},{"location":"configuration/sections/scripts/#username","text":"string By default: postgres Connection username","title":"username"},{"location":"configuration/sections/scripts/#password","text":"string By default: postgres Connection password","title":"password"},{"location":"configuration/sections/scripts/#database","text":"string By default: postgres Connection database","title":"database"},{"location":"configuration/sections/scripts/#sslmode","text":"string By default disable SSL mode","title":"sslMode"},{"location":"configuration/sections/scripts/#sslcertpath","text":"string By default: empty string Path to SSL cert","title":"sslCertPath"},{"location":"configuration/sections/scripts/#timeout","text":"int By default: 5000 timeout, milliseconds","title":"timeout"},{"location":"configuration/sections/scripts/#query","text":"string Query for scripts select. You must return exactly two string fields! First field for script name, and second field for script body. Example: SELECT name , body FROM scripts","title":"query"},{"location":"configuration/sections/storages-core/","text":"Core storage use for storing Alerts and KV data It supports 2 types: sqlite and postgres For each of these types you should define tables and fields for storing Alerts and KV data You do not have direct access to these storages from your scripts HCL YAML storagesCore { sqlite \"mySqliteStorage\" { path = \"/path/to/file\" timeout = 1000 tableKV { create = true table = \"kv\" fields { key = \"key\" value = \"value\" } } tableAlerts { create = true table = \"alerts\" fields { name = \"id\" level = \"level\" count = \"count\" createdAt = \"created_at\" updatedAt = \"updated_at\" } } } postgres \"pg1\" { host = \"domain.com\" port = 5432 username = \"username\" password = \"password\" database = \"database\" sslMode = \"verify-full\" sslCertPath = \"/path/to/cert.crt\" timeout = 3000 tableKV = {} // same as sqlite above tableAlerts = {} // same as sqlite above } } storagesCore : sqlite : - name : mySqliteStorage path : /path/to/file timeout : 1000 tableKV : create = false table : \"kv\" fields : key : key value : value tableAlerts : create = false table : \"alerts\" fields : name : id level : level count : count createdAt : created_at updatedAt : updated_at postgres : - name : pg1 host : domain.com port : 5432 username : username password : password database : database sslMode : verify-full sslCertPath : /path/to/cert.crt timeout : 3000 tableKV : ... same as sqlite above tableAlerts : ... same as sqlite above If you want to create tables by Balerter, you should use create = true . By default, this options is false","title":"core storages"},{"location":"configuration/sections/storages-upload/","text":"Upload storage use for uploading any data from your scripts (usually chart images) At the moment supports only AWS S3 compatible storage HCL YAML storagesUpload { s 3 \"dev\" { region = \"us-east1\" key = \"SOME_KEY\" secret = \"SOME_SECRET\" endpoint = \"SOME_ENDPOINT\" bucket = \"SOME_BUCKET\" } } storagesUpload : s3 : - name : dev region : us-east1 key : SOME_KEY secret : SOME_SECRET endpoint : SOME_ENDPOINT bucket : SOME_BUCKET For example: script.lua local storage = require ( 'storage.s3.myUploadStorage' ) imageURL , err = storage . uploadPNG ( binaryData )","title":"upload storages"},{"location":"configuration/sections/system/","text":"HCL YAML system = { jobWorkersCount = 32 cronLocation = 'UTC' } system : jobWorkersCount = 32 cronLocation = 'UTC' jobWorkersCount integer By default: 32 Allows redefining job workers count. It can be useful if a large number of your scripts take a long time to execute cronLocation string By default: \"Local\" Allows setting timezone for the cron For example: Europe/Berlin","title":"system"},{"location":"configuration/sections/system/#jobworkerscount","text":"integer By default: 32 Allows redefining job workers count. It can be useful if a large number of your scripts take a long time to execute","title":"jobWorkersCount"},{"location":"configuration/sections/system/#cronlocation","text":"string By default: \"Local\" Allows setting timezone for the cron For example: Europe/Berlin","title":"cronLocation"},{"location":"core-api/about/","text":"Since v0.10.0 Balerter provides Core API. It's allows you to use core modules from your scripts, written and running outside Balerter with your preferred languages. Libraries: go python Feel for free for contributions for these or new libraries! If you want to add new library for Balerter Core API, please check this discussion For use Core API, you need to add coreApi section to your api configuration. Read more API All API methods returns JSON response: Success response: { \"status\" : \"ok\" , \"result\" : <resul t da ta > } Error response: { \"status\" : \"error\" , \"error\" : \"error message\" }","title":"about"},{"location":"core-api/about/#api","text":"All API methods returns JSON response: Success response: { \"status\" : \"ok\" , \"result\" : <resul t da ta > } Error response: { \"status\" : \"error\" , \"error\" : \"error message\" }","title":"API"},{"location":"core-api/alert/","text":"This endpoint allows to use alert core module methods success Call alert module with success level request POST /alert/success/{id} {id} - alert name (id) request body - alert message with text/plain content type Query Arg Description channels channels, comma-separated string quiet true for quiet enabled repeat number image image url or base64 encoded raw image data fields <key>:<value> pairs, comma-separated escalate <number>:<channel>,<channel> , semicolon-separated Example curl -X \"POST\" \"http://127.0.0.1:2020/alert/error/id1?image=https%3A%2F%2Fwww.google.com%2Fimages%2Fbranding%2Fgooglelogo%2F2x%2Fgooglelogo_color_272x92dp.png&repeat=2\" \\ -H 'Content-Type: text/plain; charset=utf-8' \\ -d \"alert message\" Its request is analogous to the following lua script: script.lua local alert = require ( \"alert\" ) alert . error ( 'id1' , 'alert message' , { image = 'https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png' , resend = 2 }) response { \"status\" : \"ok\" , \"result\" : { \"alert\" : { \"name\" : \"id1\" , \"level\" : 3 , \"last_change\" : \"2022-08-05T12:07:59.58757+03:00\" , \"start\" : \"2022-08-05T12:07:59.58757+03:00\" , \"count\" : 4 }, \"level_was_updated\" : false } } warning Call alert module with warning level POST /alert/warning/{id} See details in success error Call alert module with error level POST /alert/error/{id} See details in success get Get an alert by the name request POST /alert/get/{id} {id} - alert name (id) response { \"status\" : \"ok\" , \"result\" : { \"alert\" : { \"name\" : \"id1\" , \"level\" : 3 , \"last_change\" : \"2022-08-05T12:07:59.58757+03:00\" , \"start\" : \"2022-08-05T12:07:59.58757+03:00\" , \"count\" : 4 }, \"level_was_updated\" : false } }","title":"alert"},{"location":"core-api/alert/#methods","text":"","title":"methods"},{"location":"core-api/alert/#success","text":"Call alert module with success level","title":"success"},{"location":"core-api/alert/#request","text":"POST /alert/success/{id} {id} - alert name (id) request body - alert message with text/plain content type Query Arg Description channels channels, comma-separated string quiet true for quiet enabled repeat number image image url or base64 encoded raw image data fields <key>:<value> pairs, comma-separated escalate <number>:<channel>,<channel> , semicolon-separated Example curl -X \"POST\" \"http://127.0.0.1:2020/alert/error/id1?image=https%3A%2F%2Fwww.google.com%2Fimages%2Fbranding%2Fgooglelogo%2F2x%2Fgooglelogo_color_272x92dp.png&repeat=2\" \\ -H 'Content-Type: text/plain; charset=utf-8' \\ -d \"alert message\" Its request is analogous to the following lua script: script.lua local alert = require ( \"alert\" ) alert . error ( 'id1' , 'alert message' , { image = 'https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png' , resend = 2 })","title":"request"},{"location":"core-api/alert/#response","text":"{ \"status\" : \"ok\" , \"result\" : { \"alert\" : { \"name\" : \"id1\" , \"level\" : 3 , \"last_change\" : \"2022-08-05T12:07:59.58757+03:00\" , \"start\" : \"2022-08-05T12:07:59.58757+03:00\" , \"count\" : 4 }, \"level_was_updated\" : false } }","title":"response"},{"location":"core-api/alert/#warning","text":"Call alert module with warning level POST /alert/warning/{id} See details in success","title":"warning"},{"location":"core-api/alert/#error","text":"Call alert module with error level POST /alert/error/{id} See details in success","title":"error"},{"location":"core-api/alert/#get","text":"Get an alert by the name","title":"get"},{"location":"core-api/alert/#request_1","text":"POST /alert/get/{id} {id} - alert name (id)","title":"request"},{"location":"core-api/alert/#response_1","text":"{ \"status\" : \"ok\" , \"result\" : { \"alert\" : { \"name\" : \"id1\" , \"level\" : 3 , \"last_change\" : \"2022-08-05T12:07:59.58757+03:00\" , \"start\" : \"2022-08-05T12:07:59.58757+03:00\" , \"count\" : 4 }, \"level_was_updated\" : false } }","title":"response"},{"location":"core-api/chart/","text":"This endpoint allows to use chart core module render request POST /chart/render Request body format: { \"title\" : \"chart title\" , \"series\" [ <series da ta > ] } Series data: see chart module documentation about series data format { \"color\" : \"red\" , \"line_color\" : \"\" , \"point_color\" : \"\" , \"data\" : [ <da ta > ] } Data: { \"timestamp\" : 123123123123 , \"value\" : 10.20 } Example curl -X \"POST\" \"http://127.0.0.1:2020/chart/render\" \\ -H 'Content-Type: application/json; charset=utf-8' \\ -d $'{ \"title\": \"FooBar\", \"series\": [ { \"data\": [ { \"value\": 95, \"timestamp\": 12345646554 }, { \"value\": 94, \"timestamp\": 12345646555 } ] } ] }' Its request is analogous to the following lua script: script.lua local ch = require ( \"chart\" ) data = { title = \"FooBar\" , series = { { data = { { value = 95 , timestamp = 12345646554 }, { value = 94 , timestamp = 12345646555 } } } } } result = ch . render ( data ) response { \"status\" : \"ok\" , \"result\" : <base 64 e n coded image> } Chart response image:","title":"chart"},{"location":"core-api/chart/#render","text":"","title":"render"},{"location":"core-api/chart/#request","text":"POST /chart/render Request body format: { \"title\" : \"chart title\" , \"series\" [ <series da ta > ] } Series data: see chart module documentation about series data format { \"color\" : \"red\" , \"line_color\" : \"\" , \"point_color\" : \"\" , \"data\" : [ <da ta > ] } Data: { \"timestamp\" : 123123123123 , \"value\" : 10.20 } Example curl -X \"POST\" \"http://127.0.0.1:2020/chart/render\" \\ -H 'Content-Type: application/json; charset=utf-8' \\ -d $'{ \"title\": \"FooBar\", \"series\": [ { \"data\": [ { \"value\": 95, \"timestamp\": 12345646554 }, { \"value\": 94, \"timestamp\": 12345646555 } ] } ] }' Its request is analogous to the following lua script: script.lua local ch = require ( \"chart\" ) data = { title = \"FooBar\" , series = { { data = { { value = 95 , timestamp = 12345646554 }, { value = 94 , timestamp = 12345646555 } } } } } result = ch . render ( data )","title":"request"},{"location":"core-api/chart/#response","text":"{ \"status\" : \"ok\" , \"result\" : <base 64 e n coded image> } Chart response image:","title":"response"},{"location":"core-api/datasource/","text":"This endpoint allows to use datasource core module Basic request format: POST /datasource/{type}/{name}/{method} clickhouse query request POST /datasource/clickhouse/{name}/query request body - SQL query Example: curl -X \"POST\" \"http://127.0.0.1:2020/datasource/clickhouse/ch1/query\" \\ -H 'Content-Type: text/plain; charset=utf-8' \\ -d \"SELECT 'foo' AS name, 42 AS age, now() AS time\" Its request is analogous to the following lua script: script.lua local ds = require ( \"datasource.clickhouse.ch1\" ) result = ds . query ( 'SELECT ' foo ' AS name, 42 AS age, now() AS time' ) response { \"status\" : \"ok\" , \"result\" : [ { \"age\" : 42 , \"name\" : \"foo\" , \"time\" : \"2022-08-11T17:46:25.738789+03:00\" } ] } postgres All methods are analogous to the ones for clickhouse. POST /datasource/clickhouse/{name}/query mysql All methods are analogous to the ones for clickhouse. POST /datasource/mysql/{name}/query prometheus query request POST /datasource/prometheus/{name}/query request body - prometheus query Query Arg Description time evaluation timestamp Example: curl -X \"POST\" \"http://127.0.0.1:2020/datasource/prometheus/prom1/query\" \\ -H 'Content-Type: text/plain; charset=utf-8' \\ -d \"sum(go_goroutines)\" Its request is analogous to the following lua script: script.lua local ds = require ( \"datasource.prometheus.prom1\" ) result = ds . query ( 'sum(go_goroutines)' ) response { \"status\" : \"ok\" , \"result\" : [ { \"metric\" : {}, \"value\" : { \"Timestamp\" : 1660229686 , \"Value\" : 2366701 } } ] } range request POST /datasource/prometheus/{name}/range request body - prometheus query Query Arg Description start start timestamp end end timestamp step query resolution step width in duration format or float number of seconds Example: curl -X \"POST\" \"http://127.0.0.1:2020/datasource/prometheus/prom1/range\" \\ -H 'Content-Type: text/plain; charset=utf-8' \\ -d \"sum(go_goroutines)\" Its request is analogous to the following lua script: script.lua local ds = require ( \"datasource.prometheus.prom1\" ) result = ds . range ( 'sum(go_goroutines)' ) response { \"status\" : \"ok\" , \"result\" : [ { \"metric\" : {}, \"values\" : [ { \"Timestamp\" : 1660229402 , \"Value\" : 2379968 }, { \"Timestamp\" : 1660229702 , \"Value\" : 2338777 } ] } ] } loki query request POST /datasource/loki/{name}/query request body - loki query Query Arg Description limit the max number of entries to return time the evaluation time for the query as a nanosecond Unix epoch direction determines the sort order of logs. Supported values are forward or backward Example: curl -X \"POST\" \"http://127.0.0.1:2020/datasource/loki/loki1/query\" \\ -H 'Content-Type: text/plain; charset=utf-8' \\ -d \"{level=\\\"error\\\"}!=\\\"cache\\\"\" Its request is analogous to the following lua script: script.lua local ds = require ( \"datasource.loki.loki1\" ) result = ds . query ( '{level=\"error\"}!=\"cache\"' ) response { \"status\" : \"ok\" , \"result\" : [ { \"stream\" : { \"alloc\" : \"5fa29686-90d5-9bee-d205-4f0b0503479e\" , \"datacenter\" : \"eu-1\" , \"filename\" : \"/var/lib/nomad/data/alloc/5fa29686-90d5-9bee-d205-4f0b0503479e/alloc/logs/crcheck.stderr.50\" , \"job\" : \"nomad_log\" , \"level\" : \"error\" , \"node\" : \"node44\" }, \"values\" : [ { \"Timestamp\" : 1660229986334893409 , \"Value\" : \"loki message\" }, { \"Timestamp\" : 1660229971536920460 , \"Value\" : \"loki message\" }, { \"Timestamp\" : 1660229963513371299 , \"Value\" : \"loki message\" } ] } ] } range request POST /datasource/loki/{name}/range request body - loki query Query Arg Description limit the max number of entries to return start start timestamp end end timestamp step query resolution step width in duration format or float number of seconds direction determines the sort order of logs. Supported values are forward or backward Example: curl -X \"POST\" \"http://127.0.0.1:2020/datasource/loki/loki1/range\" \\ -H 'Content-Type: text/plain; charset=utf-8' \\ -d \"{level=\\\"error\\\"}!=\\\"cache\\\"\" Its request is analogous to the following lua script: Its request is analogous to the following lua script: script.lua local ds = require ( \"datasource.loki.loki1\" ) result = ds . range ( '{level=\"error\"}!=\"cache\"' ) response { \"status\" : \"ok\" , \"result\" : [ { \"stream\" : { \"datacenter\" : \"eu-1\" , \"filename\" : \"/var/log/syslog\" , \"job\" : \"varlogs\" , \"level\" : \"error\" , \"node\" : \"node53\" }, \"values\" : [ { \"Timestamp\" : 1660230001560593865 , \"Value\" : \"loki message\" }, { \"Timestamp\" : 1660230000057450107 , \"Value\" : \"loki message\" } ] }, { \"stream\" : { \"datacenter\" : \"eu-1\" , \"filename\" : \"/var/log/syslog\" , \"job\" : \"varlogs\" , \"level\" : \"error\" , \"node\" : \"node24\" }, \"values\" : [ { \"Timestamp\" : 1660229666612267117 , \"Value\" : \"loki message\" } ] } ] }","title":"datasource"},{"location":"core-api/datasource/#clickhouse","text":"","title":"clickhouse"},{"location":"core-api/datasource/#query","text":"","title":"query"},{"location":"core-api/datasource/#request","text":"POST /datasource/clickhouse/{name}/query request body - SQL query Example: curl -X \"POST\" \"http://127.0.0.1:2020/datasource/clickhouse/ch1/query\" \\ -H 'Content-Type: text/plain; charset=utf-8' \\ -d \"SELECT 'foo' AS name, 42 AS age, now() AS time\" Its request is analogous to the following lua script: script.lua local ds = require ( \"datasource.clickhouse.ch1\" ) result = ds . query ( 'SELECT ' foo ' AS name, 42 AS age, now() AS time' )","title":"request"},{"location":"core-api/datasource/#response","text":"{ \"status\" : \"ok\" , \"result\" : [ { \"age\" : 42 , \"name\" : \"foo\" , \"time\" : \"2022-08-11T17:46:25.738789+03:00\" } ] }","title":"response"},{"location":"core-api/datasource/#postgres","text":"All methods are analogous to the ones for clickhouse. POST /datasource/clickhouse/{name}/query","title":"postgres"},{"location":"core-api/datasource/#mysql","text":"All methods are analogous to the ones for clickhouse. POST /datasource/mysql/{name}/query","title":"mysql"},{"location":"core-api/datasource/#prometheus","text":"","title":"prometheus"},{"location":"core-api/datasource/#query_1","text":"","title":"query"},{"location":"core-api/datasource/#request_1","text":"POST /datasource/prometheus/{name}/query request body - prometheus query Query Arg Description time evaluation timestamp Example: curl -X \"POST\" \"http://127.0.0.1:2020/datasource/prometheus/prom1/query\" \\ -H 'Content-Type: text/plain; charset=utf-8' \\ -d \"sum(go_goroutines)\" Its request is analogous to the following lua script: script.lua local ds = require ( \"datasource.prometheus.prom1\" ) result = ds . query ( 'sum(go_goroutines)' )","title":"request"},{"location":"core-api/datasource/#response_1","text":"{ \"status\" : \"ok\" , \"result\" : [ { \"metric\" : {}, \"value\" : { \"Timestamp\" : 1660229686 , \"Value\" : 2366701 } } ] }","title":"response"},{"location":"core-api/datasource/#range","text":"","title":"range"},{"location":"core-api/datasource/#request_2","text":"POST /datasource/prometheus/{name}/range request body - prometheus query Query Arg Description start start timestamp end end timestamp step query resolution step width in duration format or float number of seconds Example: curl -X \"POST\" \"http://127.0.0.1:2020/datasource/prometheus/prom1/range\" \\ -H 'Content-Type: text/plain; charset=utf-8' \\ -d \"sum(go_goroutines)\" Its request is analogous to the following lua script: script.lua local ds = require ( \"datasource.prometheus.prom1\" ) result = ds . range ( 'sum(go_goroutines)' )","title":"request"},{"location":"core-api/datasource/#response_2","text":"{ \"status\" : \"ok\" , \"result\" : [ { \"metric\" : {}, \"values\" : [ { \"Timestamp\" : 1660229402 , \"Value\" : 2379968 }, { \"Timestamp\" : 1660229702 , \"Value\" : 2338777 } ] } ] }","title":"response"},{"location":"core-api/datasource/#loki","text":"","title":"loki"},{"location":"core-api/datasource/#query_2","text":"","title":"query"},{"location":"core-api/datasource/#request_3","text":"POST /datasource/loki/{name}/query request body - loki query Query Arg Description limit the max number of entries to return time the evaluation time for the query as a nanosecond Unix epoch direction determines the sort order of logs. Supported values are forward or backward Example: curl -X \"POST\" \"http://127.0.0.1:2020/datasource/loki/loki1/query\" \\ -H 'Content-Type: text/plain; charset=utf-8' \\ -d \"{level=\\\"error\\\"}!=\\\"cache\\\"\" Its request is analogous to the following lua script: script.lua local ds = require ( \"datasource.loki.loki1\" ) result = ds . query ( '{level=\"error\"}!=\"cache\"' )","title":"request"},{"location":"core-api/datasource/#response_3","text":"{ \"status\" : \"ok\" , \"result\" : [ { \"stream\" : { \"alloc\" : \"5fa29686-90d5-9bee-d205-4f0b0503479e\" , \"datacenter\" : \"eu-1\" , \"filename\" : \"/var/lib/nomad/data/alloc/5fa29686-90d5-9bee-d205-4f0b0503479e/alloc/logs/crcheck.stderr.50\" , \"job\" : \"nomad_log\" , \"level\" : \"error\" , \"node\" : \"node44\" }, \"values\" : [ { \"Timestamp\" : 1660229986334893409 , \"Value\" : \"loki message\" }, { \"Timestamp\" : 1660229971536920460 , \"Value\" : \"loki message\" }, { \"Timestamp\" : 1660229963513371299 , \"Value\" : \"loki message\" } ] } ] }","title":"response"},{"location":"core-api/datasource/#range_1","text":"","title":"range"},{"location":"core-api/datasource/#request_4","text":"POST /datasource/loki/{name}/range request body - loki query Query Arg Description limit the max number of entries to return start start timestamp end end timestamp step query resolution step width in duration format or float number of seconds direction determines the sort order of logs. Supported values are forward or backward Example: curl -X \"POST\" \"http://127.0.0.1:2020/datasource/loki/loki1/range\" \\ -H 'Content-Type: text/plain; charset=utf-8' \\ -d \"{level=\\\"error\\\"}!=\\\"cache\\\"\" Its request is analogous to the following lua script: Its request is analogous to the following lua script: script.lua local ds = require ( \"datasource.loki.loki1\" ) result = ds . range ( '{level=\"error\"}!=\"cache\"' )","title":"request"},{"location":"core-api/datasource/#response_4","text":"{ \"status\" : \"ok\" , \"result\" : [ { \"stream\" : { \"datacenter\" : \"eu-1\" , \"filename\" : \"/var/log/syslog\" , \"job\" : \"varlogs\" , \"level\" : \"error\" , \"node\" : \"node53\" }, \"values\" : [ { \"Timestamp\" : 1660230001560593865 , \"Value\" : \"loki message\" }, { \"Timestamp\" : 1660230000057450107 , \"Value\" : \"loki message\" } ] }, { \"stream\" : { \"datacenter\" : \"eu-1\" , \"filename\" : \"/var/log/syslog\" , \"job\" : \"varlogs\" , \"level\" : \"error\" , \"node\" : \"node24\" }, \"values\" : [ { \"Timestamp\" : 1660229666612267117 , \"Value\" : \"loki message\" } ] } ] }","title":"response"},{"location":"core-api/kv/","text":"This endpoint allows to use kv core module all request POST /kv/all Example curl -X \"POST\" \"http://127.0.0.1:2020/kv/all\" Its request is analogous to the following lua script: script.lua local kv = require ( \"kv\" ) result = kv . all () response { \"status\" : \"ok\" , \"result\" : { \"var1\" : \"barbaz\" , \"var2\" : \"foobar\" } } put request POST /kv/put/{key} {key} - key to put request body - value to put Example curl -X \"POST\" \"http://127.0.0.1:2020/kv/put/var1\" \\ -H 'Content-Type: text/plain; charset=utf-8' \\ -d \"barbaz\" Its request is analogous to the following lua script: script.lua local kv = require ( \"kv\" ) kv . put ( 'var1' , 'barbaz' ) response { \"status\" : \"ok\" } upsert request POST /kv/upsert/{key} {key} - key to put request body - value to put Example curl -X \"POST\" \"http://127.0.0.1:2020/kv/upsert/var1\" \\ -H 'Content-Type: text/plain; charset=utf-8' \\ -d \"barbaz\" Its request is analogous to the following lua script: script.lua local kv = require ( \"kv\" ) kv . upsert ( 'var1' , 'barbaz' ) response { \"status\" : \"ok\" } get request POST /kv/get/{key} {key} - key to get Example curl -X \"POST\" \"http://127.0.0.1:2020/kv/get/var1\" Its request is analogous to the following lua script: script.lua local kv = require ( \"kv\" ) result = kv . get ( 'var1' ) response { \"status\" : \"ok\" , \"result\" : \"barbaz\" } delete request POST /kv/delete/{key} {key} - key to delete Example curl -X \"POST\" \"http://127.0.0.1:2020/kv/delete/var1\" Its request is analogous to the following lua script: script.lua local kv = require ( \"kv\" ) kv . delete ( 'var1' ) response { \"status\" : \"ok\" }","title":"kv"},{"location":"core-api/kv/#all","text":"","title":"all"},{"location":"core-api/kv/#request","text":"POST /kv/all Example curl -X \"POST\" \"http://127.0.0.1:2020/kv/all\" Its request is analogous to the following lua script: script.lua local kv = require ( \"kv\" ) result = kv . all ()","title":"request"},{"location":"core-api/kv/#response","text":"{ \"status\" : \"ok\" , \"result\" : { \"var1\" : \"barbaz\" , \"var2\" : \"foobar\" } }","title":"response"},{"location":"core-api/kv/#put","text":"","title":"put"},{"location":"core-api/kv/#request_1","text":"POST /kv/put/{key} {key} - key to put request body - value to put Example curl -X \"POST\" \"http://127.0.0.1:2020/kv/put/var1\" \\ -H 'Content-Type: text/plain; charset=utf-8' \\ -d \"barbaz\" Its request is analogous to the following lua script: script.lua local kv = require ( \"kv\" ) kv . put ( 'var1' , 'barbaz' )","title":"request"},{"location":"core-api/kv/#response_1","text":"{ \"status\" : \"ok\" }","title":"response"},{"location":"core-api/kv/#upsert","text":"","title":"upsert"},{"location":"core-api/kv/#request_2","text":"POST /kv/upsert/{key} {key} - key to put request body - value to put Example curl -X \"POST\" \"http://127.0.0.1:2020/kv/upsert/var1\" \\ -H 'Content-Type: text/plain; charset=utf-8' \\ -d \"barbaz\" Its request is analogous to the following lua script: script.lua local kv = require ( \"kv\" ) kv . upsert ( 'var1' , 'barbaz' )","title":"request"},{"location":"core-api/kv/#response_2","text":"{ \"status\" : \"ok\" }","title":"response"},{"location":"core-api/kv/#get","text":"","title":"get"},{"location":"core-api/kv/#request_3","text":"POST /kv/get/{key} {key} - key to get Example curl -X \"POST\" \"http://127.0.0.1:2020/kv/get/var1\" Its request is analogous to the following lua script: script.lua local kv = require ( \"kv\" ) result = kv . get ( 'var1' )","title":"request"},{"location":"core-api/kv/#response_3","text":"{ \"status\" : \"ok\" , \"result\" : \"barbaz\" }","title":"response"},{"location":"core-api/kv/#delete","text":"","title":"delete"},{"location":"core-api/kv/#request_4","text":"POST /kv/delete/{key} {key} - key to delete Example curl -X \"POST\" \"http://127.0.0.1:2020/kv/delete/var1\" Its request is analogous to the following lua script: script.lua local kv = require ( \"kv\" ) kv . delete ( 'var1' )","title":"request"},{"location":"core-api/kv/#response_4","text":"{ \"status\" : \"ok\" }","title":"response"},{"location":"core-api/log/","text":"This endpoint allows to use log core module info request POST /log/info request body - log message Example curl -X \"POST\" \"http://127.0.0.1:2020/log/info\" \\ -H 'Content-Type: text/plain; charset=utf-8' \\ -d \"foo bar baz\" Its request is analogous to the following lua script: script.lua local log = require ( \"log\" ) result = log . info ( 'foo bar baz' ) response { \"status\" : \"ok\" } error POST /log/error Same as info warn POST /log/warn Same as info debug POST /log/debug Same as info","title":"log"},{"location":"core-api/log/#info","text":"","title":"info"},{"location":"core-api/log/#request","text":"POST /log/info request body - log message Example curl -X \"POST\" \"http://127.0.0.1:2020/log/info\" \\ -H 'Content-Type: text/plain; charset=utf-8' \\ -d \"foo bar baz\" Its request is analogous to the following lua script: script.lua local log = require ( \"log\" ) result = log . info ( 'foo bar baz' )","title":"request"},{"location":"core-api/log/#response","text":"{ \"status\" : \"ok\" }","title":"response"},{"location":"core-api/log/#error","text":"POST /log/error Same as info","title":"error"},{"location":"core-api/log/#warn","text":"POST /log/warn Same as info","title":"warn"},{"location":"core-api/log/#debug","text":"POST /log/debug Same as info","title":"debug"},{"location":"core-api/runtime/","text":"This endpoint allows to use runtime core module get request POST /runtime/get Example curl -X \"POST\" \"http://127.0.0.1:2020/runtime/get\" Its request is analogous to the following lua script: script.lua local rt = require ( \"runtime\" ) result = rt . get () response { \"status\" : \"ok\" , \"result\" : { \"log_level\" : \"DEBUG\" , \"is_debug\" : true , \"is_once\" : false , \"with_script\" : \"\" , \"config_source\" : \"balerter.hcl\" , \"safe_mode\" : false } }","title":"runtime"},{"location":"core-api/runtime/#get","text":"","title":"get"},{"location":"core-api/runtime/#request","text":"POST /runtime/get Example curl -X \"POST\" \"http://127.0.0.1:2020/runtime/get\" Its request is analogous to the following lua script: script.lua local rt = require ( \"runtime\" ) result = rt . get ()","title":"request"},{"location":"core-api/runtime/#response","text":"{ \"status\" : \"ok\" , \"result\" : { \"log_level\" : \"DEBUG\" , \"is_debug\" : true , \"is_once\" : false , \"with_script\" : \"\" , \"config_source\" : \"balerter.hcl\" , \"safe_mode\" : false } }","title":"response"},{"location":"core-api/tls/","text":"This endpoint allows to use tls core module get Call tls module with get function request POST /tls/get request body - domain Example curl -X \"POST\" \"http://127.0.0.1:2020/tls/get\" \\ -H 'Content-Type: text/plain; charset=utf-8' \\ -d \"domain.com\" Its request is analogous to the following lua script: script.lua local tls = require ( \"tls\" ) result = tls . get ( 'domain.com' ) response { \"status\" : \"ok\" , \"result\" : [ { \"issuer\" : \"CN=Sectigo RSA Domain Validation Secure Server CA,O=Sectigo Limited,L=Salford,ST=Greater Manchester,C=GB\" , \"expiry\" : 1662767999 , \"dns_names\" : [ \"*.domain.com\" , \"domain.com\" ], \"email_addresses\" : null }, { \"issuer\" : \"CN=USERTrust RSA Certification Authority,O=The USERTRUST Network,L=Jersey City,ST=New Jersey,C=US\" , \"expiry\" : 1924991999 , \"dns_names\" : null , \"email_addresses\" : null }, { \"issuer\" : \"CN=AAA Certificate Services,O=Comodo CA Limited,L=Salford,ST=Greater Manchester,C=GB\" , \"expiry\" : 1861919999 , \"dns_names\" : null , \"email_addresses\" : null } ] }","title":"tls"},{"location":"core-api/tls/#get","text":"Call tls module with get function","title":"get"},{"location":"core-api/tls/#request","text":"POST /tls/get request body - domain Example curl -X \"POST\" \"http://127.0.0.1:2020/tls/get\" \\ -H 'Content-Type: text/plain; charset=utf-8' \\ -d \"domain.com\" Its request is analogous to the following lua script: script.lua local tls = require ( \"tls\" ) result = tls . get ( 'domain.com' )","title":"request"},{"location":"core-api/tls/#response","text":"{ \"status\" : \"ok\" , \"result\" : [ { \"issuer\" : \"CN=Sectigo RSA Domain Validation Secure Server CA,O=Sectigo Limited,L=Salford,ST=Greater Manchester,C=GB\" , \"expiry\" : 1662767999 , \"dns_names\" : [ \"*.domain.com\" , \"domain.com\" ], \"email_addresses\" : null }, { \"issuer\" : \"CN=USERTrust RSA Certification Authority,O=The USERTRUST Network,L=Jersey City,ST=New Jersey,C=US\" , \"expiry\" : 1924991999 , \"dns_names\" : null , \"email_addresses\" : null }, { \"issuer\" : \"CN=AAA Certificate Services,O=Comodo CA Limited,L=Salford,ST=Greater Manchester,C=GB\" , \"expiry\" : 1861919999 , \"dns_names\" : null , \"email_addresses\" : null } ] }","title":"response"},{"location":"core-modules/about/","text":"Core modules is builtin modules, which you can use in your lua scripts or through the Core API Some modules only available from Lua scripts","title":"about"},{"location":"core-modules/alert/","text":"Core API This module available in Core API Alert - is the basic concept of Balerter Alert has unique ID (name) and one of three possible statuses: Success , Warning , Error By default, status changing send notification. However, you can change this behavior. Alerts are managed by their IDs. You manually define IDs, and you should check their uniqueness. Getting Alert by ID is global through all scripts On start all Alerts have status Succes Usage: script.lua local alert = require ( 'alert' ) Parameters All methods have one required and two not required arguments Alert ID. Type: text . Require Notification message. Type text Alert Options. Type table Alert options { quiet = <BOOL>, resend = <UINT>, channels = <STRINGS>, image = <IMAGE_URL>, fields = <map[string]string> } { quiet = true, resend = 5, channels = {'channal-name-1', 'channel-name-2', ...}, image = \"http://placehold.it/200x200\", fields = { foo = 'bar', baz = '42'} } image string You can provide image URL for pass image to the channel. For telegram channel you can use raw binary data for send image script.lua local img = chart . render (...) alert . error ( 'id' , 'message text' , { image = img } ) quiet bool suppress a message on status change. By default, false resend int notifications repeat (alias: repeat ) By default - 0. Set any non-negative value N > 0, and notification will be sent by every N check Example: Our script, which run every 1 minute script.lua -- @cron 0 * * * * local alert = require ( 'alert' ) alert . error ( 'alert-id' , 'An error occured!`) Because every alerts on start have status Success , on first script run alert will be changed to Error and you will get notification On next runs, notifications will not be sent, because Alert already has status `Error' Now change the script (add alert options): script.lua alert . error ( 'alert-id' , 'An error occured!`, { resend = 5 }) This is mean, while status does not change, every 5 runs notification will be sent channels notification channels Redefine channels for send notifications By default, notifications sent to all channels, registered in configuration An example: script.lua alert . error ( 'alert-name-1' , 'Alert Text' , { channels = { 'slack-seo' } }) fields additional fields for the notification message Fields will be attached to the message. fields option is not supported for channels: notify , twilio Methods get get(<ALERT_NAME>) result, error Get an info about an alert If an error occurred, it will be returns as second parameter A response: { name = <ALERT_NAME> level = <ALERT_LEVEL> (error|warning|success) last_change = <UNIX_TIMESTAMP> count = <INT> } An example: script.lua info = alert . get ( 'alert-id' ) error error(<ALERT_NAME>[, <ALERT_MESSAGE>[, <ALERT_OPTIONS>]]) Aliases: fail Set status Error An example: script.lua alert . error ( 'alert-id' , 'An error accured' ) alert . fail ( 'alert-id' , 'Service FOO is unavailable' ) warning warning(<ALERT_NAME>[, <ALERT_MESSAGE>[, <ALERT_OPTIONS>]]) Aliases: warn Set status Warning An example: script.lua alert . warn ( 'alert-id' , 'RPS too low' ) success success(<ALERT_NAME>[, <ALERT_MESSAGE>[, <ALERT_OPTIONS>]]) Aliases: ok Set status Success An example: script.lua alert . success ( 'alert-id' , 'Serive is available' ) alert . ok ( 'alert-id' , 'OK' )","title":"alert"},{"location":"core-modules/alert/#usage","text":"script.lua local alert = require ( 'alert' )","title":"Usage:"},{"location":"core-modules/alert/#parameters","text":"All methods have one required and two not required arguments Alert ID. Type: text . Require Notification message. Type text Alert Options. Type table","title":"Parameters"},{"location":"core-modules/alert/#alert-options","text":"{ quiet = <BOOL>, resend = <UINT>, channels = <STRINGS>, image = <IMAGE_URL>, fields = <map[string]string> } { quiet = true, resend = 5, channels = {'channal-name-1', 'channel-name-2', ...}, image = \"http://placehold.it/200x200\", fields = { foo = 'bar', baz = '42'} }","title":"Alert options"},{"location":"core-modules/alert/#image","text":"string You can provide image URL for pass image to the channel. For telegram channel you can use raw binary data for send image script.lua local img = chart . render (...) alert . error ( 'id' , 'message text' , { image = img } )","title":"image"},{"location":"core-modules/alert/#quiet","text":"bool suppress a message on status change. By default, false","title":"quiet"},{"location":"core-modules/alert/#resend","text":"int notifications repeat (alias: repeat ) By default - 0. Set any non-negative value N > 0, and notification will be sent by every N check Example: Our script, which run every 1 minute script.lua -- @cron 0 * * * * local alert = require ( 'alert' ) alert . error ( 'alert-id' , 'An error occured!`) Because every alerts on start have status Success , on first script run alert will be changed to Error and you will get notification On next runs, notifications will not be sent, because Alert already has status `Error' Now change the script (add alert options): script.lua alert . error ( 'alert-id' , 'An error occured!`, { resend = 5 }) This is mean, while status does not change, every 5 runs notification will be sent","title":"resend"},{"location":"core-modules/alert/#channels","text":"notification channels Redefine channels for send notifications By default, notifications sent to all channels, registered in configuration An example: script.lua alert . error ( 'alert-name-1' , 'Alert Text' , { channels = { 'slack-seo' } })","title":"channels"},{"location":"core-modules/alert/#fields","text":"additional fields for the notification message Fields will be attached to the message. fields option is not supported for channels: notify , twilio","title":"fields"},{"location":"core-modules/alert/#methods","text":"","title":"Methods"},{"location":"core-modules/alert/#get","text":"get(<ALERT_NAME>) result, error Get an info about an alert If an error occurred, it will be returns as second parameter A response: { name = <ALERT_NAME> level = <ALERT_LEVEL> (error|warning|success) last_change = <UNIX_TIMESTAMP> count = <INT> } An example: script.lua info = alert . get ( 'alert-id' )","title":"get"},{"location":"core-modules/alert/#error","text":"error(<ALERT_NAME>[, <ALERT_MESSAGE>[, <ALERT_OPTIONS>]]) Aliases: fail Set status Error An example: script.lua alert . error ( 'alert-id' , 'An error accured' ) alert . fail ( 'alert-id' , 'Service FOO is unavailable' )","title":"error"},{"location":"core-modules/alert/#warning","text":"warning(<ALERT_NAME>[, <ALERT_MESSAGE>[, <ALERT_OPTIONS>]]) Aliases: warn Set status Warning An example: script.lua alert . warn ( 'alert-id' , 'RPS too low' )","title":"warning"},{"location":"core-modules/alert/#success","text":"success(<ALERT_NAME>[, <ALERT_MESSAGE>[, <ALERT_OPTIONS>]]) Aliases: ok Set status Success An example: script.lua alert . success ( 'alert-id' , 'Serive is available' ) alert . ok ( 'alert-id' , 'OK' )","title":"success"},{"location":"core-modules/api/","text":"Core API This module is not available in Core API You can use this module for getting the information about request, if the script run with API call. Usage: script.lua local api = require ( 'api' ) Methods is_api Returns true , if the script was run with API call script.lua local api = require ( 'api' ) isApi = api . is_api () query Returns query arguments An example: Query: ...?name=foo&name=bar&baz=42 script.lua local api = require ( 'api' ) local h = require ( 'h' ) local q = api . query () h . print ( q ) result { name = { \"foo\" \"bar\" } baz = { \"42\" } } url Returns the request URL body Returns the request Body method Returns the request method","title":"api"},{"location":"core-modules/api/#usage","text":"script.lua local api = require ( 'api' )","title":"Usage:"},{"location":"core-modules/api/#methods","text":"","title":"Methods"},{"location":"core-modules/api/#is_api","text":"Returns true , if the script was run with API call script.lua local api = require ( 'api' ) isApi = api . is_api ()","title":"is_api"},{"location":"core-modules/api/#query","text":"Returns query arguments An example: Query: ...?name=foo&name=bar&baz=42 script.lua local api = require ( 'api' ) local h = require ( 'h' ) local q = api . query () h . print ( q ) result { name = { \"foo\" \"bar\" } baz = { \"42\" } }","title":"query"},{"location":"core-modules/api/#url","text":"Returns the request URL","title":"url"},{"location":"core-modules/api/#body","text":"Returns the request Body","title":"body"},{"location":"core-modules/api/#method","text":"Returns the request method","title":"method"},{"location":"core-modules/chart/","text":"Core API This module available in Core API Module chart allows to create an image with a chart. After you can upload an image to remote storage and attach to an alert. Usage: script.lua local chart = require ( 'chart' ) Methods render render('<CHART_TITLE>', <CHART_OPTIONS>) binaryImageData, error Render image and return it as binary data If an error occurred, it will be returned as second value Chart Options A structure <CHART_OPTIONS> describe data for build a chart { series = { <CHART_SERIES>, <CHART_SERIES>, ... } } Series is lines on a chart Series { color = '<COLOR>', line_color = '<COLOR>', point_color = '<COLOR>', data = { <POINT_VALUE>, <POINT_VALUE>, ... } } color , line_color , point_color allows define a common color, a line color or a point color If defined only color - it will be applying to lines and points Default color is black data contains data for every points One point describe as: { timestamp = <FLOAT> value = <FLOAT> } Color color ( color_line , color_point ) may have: One of these values - blue - red - black - green - yellow String #XXXXXX for define a color in format RGB or #XXXXXXXX for define a color in format RGBA An example: color = 'blue' color = '#00FF00' color = '#ABCD12FA' Examples Manually define a chart data: script.lua local chartOptions = { [ 'series' ] = { { [ 'color' ] = '#456789' , [ \"data\" ] = { { [ 'timestamp' ] = 12345646554 , [ 'value' ] = 95 }, { [ 'timestamp' ] = 12345646555 , [ 'value' ] = 94 }, { [ 'timestamp' ] = 12345646556 , [ 'value' ] = 97 }, { [ 'timestamp' ] = 12345646557 , [ 'value' ] = 93 } } }, { [ 'color' ] = 'red' , [ \"data\" ] = { { [ 'timestamp' ] = 12345646554 , [ 'value' ] = 85 }, { [ 'timestamp' ] = 12345646555 , [ 'value' ] = 84 }, { [ 'timestamp' ] = 12345646556 , [ 'value' ] = 87 }, { [ 'timestamp' ] = 12345646557 , [ 'value' ] = 83 } } } } } local img , err = chart . render ( 'My Chart' , chartOptions ) -- 'img' will be contains an image binary data Result image Obtain a data from Prometheus (Usage metrics from NodeExporter ) script.lua local rangeOptions = { [ 'start' ] = r - 86400 , [ 'end' ] = r , [ 'step' ] = '3600' } res1 = prom . range ( 'rate(sum(node_cpu_seconds_total{mode!=\"idle\",node=\"32\"}[5m])) / rate(sum(node_cpu_seconds_total{node=\"32\"}[5m]))' , rangeOptions ) res2 = prom . range ( 'rate(sum(node_cpu_seconds_total{mode!=\"idle\",node=\"43\"}[5m])) / rate(sum(node_cpu_seconds_total{node=\"43\"}[5m]))' , rangeOptions ) local chartOptions = { [ 'series' ] = { { [ 'color' ] = '#456789' , [ \"data\" ] = res1 [ 1 ]. values , }, { [ 'color' ] = 'red' , [ 'line_color' ] = 'blue' , [ \"data\" ] = res2 [ 1 ]. values , } } } local img , err = chart . render ( 'CPU' , chartOptions ) -- 'img' will be contains an image binary data Result image Send image You can store received image to the upload storage and then use image URL. For telegram channel you can send raw image data without upload to the storage","title":"chart"},{"location":"core-modules/chart/#methods","text":"","title":"Methods"},{"location":"core-modules/chart/#render","text":"render('<CHART_TITLE>', <CHART_OPTIONS>) binaryImageData, error Render image and return it as binary data If an error occurred, it will be returned as second value","title":"render"},{"location":"core-modules/chart/#chart-options","text":"A structure <CHART_OPTIONS> describe data for build a chart { series = { <CHART_SERIES>, <CHART_SERIES>, ... } } Series is lines on a chart","title":"Chart Options"},{"location":"core-modules/chart/#series","text":"{ color = '<COLOR>', line_color = '<COLOR>', point_color = '<COLOR>', data = { <POINT_VALUE>, <POINT_VALUE>, ... } } color , line_color , point_color allows define a common color, a line color or a point color If defined only color - it will be applying to lines and points Default color is black data contains data for every points One point describe as: { timestamp = <FLOAT> value = <FLOAT> }","title":"Series"},{"location":"core-modules/chart/#color","text":"color ( color_line , color_point ) may have: One of these values - blue - red - black - green - yellow String #XXXXXX for define a color in format RGB or #XXXXXXXX for define a color in format RGBA An example: color = 'blue' color = '#00FF00' color = '#ABCD12FA'","title":"Color"},{"location":"core-modules/chart/#examples","text":"Manually define a chart data: script.lua local chartOptions = { [ 'series' ] = { { [ 'color' ] = '#456789' , [ \"data\" ] = { { [ 'timestamp' ] = 12345646554 , [ 'value' ] = 95 }, { [ 'timestamp' ] = 12345646555 , [ 'value' ] = 94 }, { [ 'timestamp' ] = 12345646556 , [ 'value' ] = 97 }, { [ 'timestamp' ] = 12345646557 , [ 'value' ] = 93 } } }, { [ 'color' ] = 'red' , [ \"data\" ] = { { [ 'timestamp' ] = 12345646554 , [ 'value' ] = 85 }, { [ 'timestamp' ] = 12345646555 , [ 'value' ] = 84 }, { [ 'timestamp' ] = 12345646556 , [ 'value' ] = 87 }, { [ 'timestamp' ] = 12345646557 , [ 'value' ] = 83 } } } } } local img , err = chart . render ( 'My Chart' , chartOptions ) -- 'img' will be contains an image binary data Result image Obtain a data from Prometheus (Usage metrics from NodeExporter ) script.lua local rangeOptions = { [ 'start' ] = r - 86400 , [ 'end' ] = r , [ 'step' ] = '3600' } res1 = prom . range ( 'rate(sum(node_cpu_seconds_total{mode!=\"idle\",node=\"32\"}[5m])) / rate(sum(node_cpu_seconds_total{node=\"32\"}[5m]))' , rangeOptions ) res2 = prom . range ( 'rate(sum(node_cpu_seconds_total{mode!=\"idle\",node=\"43\"}[5m])) / rate(sum(node_cpu_seconds_total{node=\"43\"}[5m]))' , rangeOptions ) local chartOptions = { [ 'series' ] = { { [ 'color' ] = '#456789' , [ \"data\" ] = res1 [ 1 ]. values , }, { [ 'color' ] = 'red' , [ 'line_color' ] = 'blue' , [ \"data\" ] = res2 [ 1 ]. values , } } } local img , err = chart . render ( 'CPU' , chartOptions ) -- 'img' will be contains an image binary data Result image","title":"Examples"},{"location":"core-modules/chart/#send-image","text":"You can store received image to the upload storage and then use image URL. For telegram channel you can send raw image data without upload to the storage","title":"Send image"},{"location":"core-modules/file/","text":"Core API This module is not available in Core API The file module use for save/load local files Usage: script.lua local file = require ( 'file' ) Methods save save(filename, body) error Save a file to the disk script.lua local err = file . save ( 'example.txt' , 'Hello World!' ) if err ~= nil then print ( 'an error occurred: ' .. err ) return end load load(filename) body, error Load a file from the dist script.lua local body , err = file . load ( 'example.txt' ) if err ~= nil then print ( 'unable to put the variable in KV: ' .. err ) return end print ( body )","title":"file"},{"location":"core-modules/file/#methods","text":"","title":"Methods"},{"location":"core-modules/file/#save","text":"save(filename, body) error Save a file to the disk script.lua local err = file . save ( 'example.txt' , 'Hello World!' ) if err ~= nil then print ( 'an error occurred: ' .. err ) return end","title":"save"},{"location":"core-modules/file/#load","text":"load(filename) body, error Load a file from the dist script.lua local body , err = file . load ( 'example.txt' ) if err ~= nil then print ( 'unable to put the variable in KV: ' .. err ) return end print ( body )","title":"load"},{"location":"core-modules/http/","text":"Core API This module is not available in Core API The http allows to send HTTP requests Usage: script.lua local http = require ( 'http' ) Methods get,post,put,delete response, err = http.get(<URI>, <BODY>, <HEADERS>) get/post/put/delete Send a request with http method 'get', 'post', 'put' or 'delete' script.lua http . get ( 'https://domain.com' ) http . post ( 'https://domain.com' , 'foo=bar' ) http . delete ( 'https://domain.com' ) http . put ( 'https://domain.com' , 'foo=bar' , { Authorizaion = 'Basic ABCDE' }) Returns a response If an error occurred, it will be returns as second value Default timeout for these methods: 30s. If you want to use a custom timeout, you should to use a `http.request' method request response, err = http.request(options) Send a request options = { method = http . methodGet , uri = 'https://domain.com' , body = nil , headers = { Authentication = 'Basic ABCDEF' }, insecureSkipVerify = true , -- default: false timeout = \"10s\" -- Valid time units are \"ns\", \"us\" (or \"\u00b5s\"), \"ms\", \"s\", \"m\", \"h\". Default: 0 } http . request ( options ) Returns a response If an error occurred, it will be returns as second value response { status_code = <INT> body = <STRING> headers = { <KEY> = <VALUE>, ... } } http methods constants methodGet methodHead methodPost methodPut methodPatch methodDelete methodConnect methodOptions methodTrace script.lua http = require ( 'http' ) options = { method = http . methodPost , ... } http . request ( options )","title":"http"},{"location":"core-modules/http/#methods","text":"","title":"Methods"},{"location":"core-modules/http/#getpostputdelete","text":"response, err = http.get(<URI>, <BODY>, <HEADERS>) get/post/put/delete Send a request with http method 'get', 'post', 'put' or 'delete' script.lua http . get ( 'https://domain.com' ) http . post ( 'https://domain.com' , 'foo=bar' ) http . delete ( 'https://domain.com' ) http . put ( 'https://domain.com' , 'foo=bar' , { Authorizaion = 'Basic ABCDE' }) Returns a response If an error occurred, it will be returns as second value Default timeout for these methods: 30s. If you want to use a custom timeout, you should to use a `http.request' method","title":"get,post,put,delete"},{"location":"core-modules/http/#request","text":"response, err = http.request(options) Send a request options = { method = http . methodGet , uri = 'https://domain.com' , body = nil , headers = { Authentication = 'Basic ABCDEF' }, insecureSkipVerify = true , -- default: false timeout = \"10s\" -- Valid time units are \"ns\", \"us\" (or \"\u00b5s\"), \"ms\", \"s\", \"m\", \"h\". Default: 0 } http . request ( options ) Returns a response If an error occurred, it will be returns as second value","title":"request"},{"location":"core-modules/http/#response","text":"{ status_code = <INT> body = <STRING> headers = { <KEY> = <VALUE>, ... } }","title":"response"},{"location":"core-modules/http/#http-methods-constants","text":"methodGet methodHead methodPost methodPut methodPatch methodDelete methodConnect methodOptions methodTrace script.lua http = require ( 'http' ) options = { method = http . methodPost , ... } http . request ( options )","title":"http methods constants"},{"location":"core-modules/kv/","text":"Core API This module available in Core API The kv (key/value) module use for store Key/Value pairs KV storage is global for all scripts Usage: script.lua local kv = require ( 'kv' ) All keys and values is strings. You can cast it in your scripts For example, if you saved a number, you will get a string! Methods all all() data, error Get all KV pairs script.lua local data , err = kv . all () if err ~= nil then print ( 'an error occurred: ' .. err ) return end put put(<NAME>, <VALUE>) error Save VALUE with key NAME If the key already exists, an error will be returned script.lua local err = kv . put ( 'key' , 'value' ) if err ~= nil then print ( 'unable to put the variable in KV: ' .. err ) return end get get(<NAME>) string, error Get a value by key NAME If the key not exists, an error will be returned script.lua local value , err = kv . get ( 'key' ) if err ~= nil then print ( 'a variable not exists in KV: ' .. err ) return end print ( 'value: ' .. value ) upsert upsert(<NAME>, <VALUE>) error Save or update a record by key NAME with value VALUE If the key already exists, it will be rewrite with new value script.lua local err = kv . put ( 'key' , 'value' ) kv . upsert ( 'key' , 'new value' ) delete delete(<NAME>) error Delete a record with key NAME If the key not exists, an error will be returned script.lua local value , err = kv . delete ( 'key' ) if err ~= nil then print ( 'a variable not exists in KV: ' .. err ) return end print ( 'variable \"key\" has been deleted' )","title":"kv"},{"location":"core-modules/kv/#methods","text":"","title":"Methods"},{"location":"core-modules/kv/#all","text":"all() data, error Get all KV pairs script.lua local data , err = kv . all () if err ~= nil then print ( 'an error occurred: ' .. err ) return end","title":"all"},{"location":"core-modules/kv/#put","text":"put(<NAME>, <VALUE>) error Save VALUE with key NAME If the key already exists, an error will be returned script.lua local err = kv . put ( 'key' , 'value' ) if err ~= nil then print ( 'unable to put the variable in KV: ' .. err ) return end","title":"put"},{"location":"core-modules/kv/#get","text":"get(<NAME>) string, error Get a value by key NAME If the key not exists, an error will be returned script.lua local value , err = kv . get ( 'key' ) if err ~= nil then print ( 'a variable not exists in KV: ' .. err ) return end print ( 'value: ' .. value )","title":"get"},{"location":"core-modules/kv/#upsert","text":"upsert(<NAME>, <VALUE>) error Save or update a record by key NAME with value VALUE If the key already exists, it will be rewrite with new value script.lua local err = kv . put ( 'key' , 'value' ) kv . upsert ( 'key' , 'new value' )","title":"upsert"},{"location":"core-modules/kv/#delete","text":"delete(<NAME>) error Delete a record with key NAME If the key not exists, an error will be returned script.lua local value , err = kv . delete ( 'key' ) if err ~= nil then print ( 'a variable not exists in KV: ' .. err ) return end print ( 'variable \"key\" has been deleted' )","title":"delete"},{"location":"core-modules/log/","text":"Core API This module available in Core API The log module allows sending message to balerter log output Usage: script.lua local log = require ( 'log' ) log . error ( 'message' ) log . warn ( 'message' ) log . info ( 'message' ) log . debug ( 'message' )","title":"log"},{"location":"core-modules/meta/","text":"Core API This module is not available in Core API You can use this module for getting the information about the current script Usage: script.lua local meta = require ( 'meta' ) Methods priorExecutionTime priorExecutionTime() float Returns prior execution time in seconds. 0 for the first execution cronLocation cronLocation() string Returns cron location If cron location not specified in the configuration, Local will be returned An example: script.lua local meta = require ( 'meta' ) local h = require ( 'h' ) h . print ( meta . priorExecutionTime ()) h . print ( meta . cronLocation ()) 0.000154 UTC","title":"meta"},{"location":"core-modules/meta/#usage","text":"script.lua local meta = require ( 'meta' )","title":"Usage:"},{"location":"core-modules/meta/#methods","text":"","title":"Methods"},{"location":"core-modules/meta/#priorexecutiontime","text":"priorExecutionTime() float Returns prior execution time in seconds. 0 for the first execution","title":"priorExecutionTime"},{"location":"core-modules/meta/#cronlocation","text":"cronLocation() string Returns cron location If cron location not specified in the configuration, Local will be returned An example: script.lua local meta = require ( 'meta' ) local h = require ( 'h' ) h . print ( meta . priorExecutionTime ()) h . print ( meta . cronLocation ()) 0.000154 UTC","title":"cronLocation"},{"location":"core-modules/runtime/","text":"Core API This module available in Core API Module runtime allows you to get an information about the Balerter runtime Usage: script.lua local runtime = require ( 'runtime' ) Methods logLevel logLevel() string Get a logger level value (CLI flag -logLevel <VALUE> ) script.lua local logLevel = runtime . logLevel () // INFO isDebug isDebug() bool True, if the CLI flag --debug has been defined script.lua print ( runtime . isDebug ()) isOnce isOnce() bool True, if the CLI flag --once has been defined script.lua print ( runtime . isOnce ()) withScript withScript() string The value of the CLI flag -script <VALUE> script.lua print ( runtime . withScript ()) configSource configSource() string The value of the CLI flag -config <VALUE> script.lua print ( runtime . configSource ()) safeMode safeMode() bool The value of the CLI flag --safemode script.lua print ( runtime . safeMode ())","title":"runtime"},{"location":"core-modules/runtime/#methods","text":"","title":"Methods"},{"location":"core-modules/runtime/#loglevel","text":"logLevel() string Get a logger level value (CLI flag -logLevel <VALUE> ) script.lua local logLevel = runtime . logLevel () // INFO","title":"logLevel"},{"location":"core-modules/runtime/#isdebug","text":"isDebug() bool True, if the CLI flag --debug has been defined script.lua print ( runtime . isDebug ())","title":"isDebug"},{"location":"core-modules/runtime/#isonce","text":"isOnce() bool True, if the CLI flag --once has been defined script.lua print ( runtime . isOnce ())","title":"isOnce"},{"location":"core-modules/runtime/#withscript","text":"withScript() string The value of the CLI flag -script <VALUE> script.lua print ( runtime . withScript ())","title":"withScript"},{"location":"core-modules/runtime/#configsource","text":"configSource() string The value of the CLI flag -config <VALUE> script.lua print ( runtime . configSource ())","title":"configSource"},{"location":"core-modules/runtime/#safemode","text":"safeMode() bool The value of the CLI flag --safemode script.lua print ( runtime . safeMode ())","title":"safeMode"},{"location":"core-modules/storage/","text":"Core API This module available in Core API The storage module allows upload data to remote storage, described in configuration Usage: script.lua local storage = require ( 'storage.<TYPE>.<NAME>' ) type - storage type s3 name - storage name from configuration An example: A configuration file storages : s3 : - name : dev ... A script script.lua local s3 = require ( 'storage.s3.dev' ) s3 The storage.s3 module allows upload data to remote storage with Amazon S3 compatible API Methods uploadPNG uploadPNG(data[, <FILENAME>]) imageURL, error Upload PNG image and get public URL If an error occurred, it will be returned as second value If filename is not defined, it will be generated. You should provide filename without an extension If your filename will be having suffix .png , .jpg \u0438\u043b\u0438 .jpeg , it will be trimmed An example: script.lua local storage = require ( 'storage.s3.dev' ) local data = 'SOME_IMAGE_DATA_FROM_MODULE_CHART' local link , err = storage . uploadPNG ( data ) A public link A public link builds with format: https://<BUCKET>.<ENDPOINT>/<FILENAME>","title":"storage"},{"location":"core-modules/storage/#s3","text":"The storage.s3 module allows upload data to remote storage with Amazon S3 compatible API","title":"s3"},{"location":"core-modules/storage/#methods","text":"","title":"Methods"},{"location":"core-modules/storage/#uploadpng","text":"uploadPNG(data[, <FILENAME>]) imageURL, error Upload PNG image and get public URL If an error occurred, it will be returned as second value If filename is not defined, it will be generated. You should provide filename without an extension If your filename will be having suffix .png , .jpg \u0438\u043b\u0438 .jpeg , it will be trimmed An example: script.lua local storage = require ( 'storage.s3.dev' ) local data = 'SOME_IMAGE_DATA_FROM_MODULE_CHART' local link , err = storage . uploadPNG ( data )","title":"uploadPNG"},{"location":"core-modules/storage/#a-public-link","text":"A public link builds with format: https://<BUCKET>.<ENDPOINT>/<FILENAME>","title":"A public link"},{"location":"core-modules/test/","text":"Core API This module is not available in Core API Scripts testing module See the section Testing","title":"test"},{"location":"core-modules/tls/","text":"Core API This module available in Core API You can use this module for getting the information about domain certificates info Usage: script.lua local tls = require ( 'tls' ) Methods get get() table, error Returns the certificate's info, and an error if occurred An example: script.lua local tls = require ( 'tls' ) local h = require ( 'h' ) local info = tls . get ( 'google.com' ) h . print ( info ) { 1 = { issuer = CN=GTS CA 1O1,O=Google Trust Services,C=US expiry = 1629077759 dns names = *.google.com,*.appengine.google.com,*.bdn.dev,*.cloud.google.com,(...skipped) email addressed = } 2 = { issuer = CN=GlobalSign,OU=GlobalSign Root CA - R2,O=GlobalSign expiry = 1639526442 dns names = email addressed = } }","title":"tls"},{"location":"core-modules/tls/#usage","text":"script.lua local tls = require ( 'tls' )","title":"Usage:"},{"location":"core-modules/tls/#methods","text":"","title":"Methods"},{"location":"core-modules/tls/#get","text":"get() table, error Returns the certificate's info, and an error if occurred An example: script.lua local tls = require ( 'tls' ) local h = require ( 'h' ) local info = tls . get ( 'google.com' ) h . print ( info ) { 1 = { issuer = CN=GTS CA 1O1,O=Google Trust Services,C=US expiry = 1629077759 dns names = *.google.com,*.appengine.google.com,*.bdn.dev,*.cloud.google.com,(...skipped) email addressed = } 2 = { issuer = CN=GlobalSign,OU=GlobalSign Root CA - R2,O=GlobalSign expiry = 1639526442 dns names = email addressed = } }","title":"get"},{"location":"core-modules/datasource/about/","text":"Core API This module available in Core API clickhouse prometheus postgres mysql loki A datasource module allows get data from different sources Usage: script.lua local ds1 = require ( 'datasource.<TYPE>.<NAME>) type - datasource type clickhouse prometheus postgres etc... name - datasource name from configuration Examples: config.yaml datasources : clickhouse : - name : dev ... - name : prod ... postgres : - name : dev ... - name : prod ... prometheus : - name : prom1 Usage modules in a script: local chDev = require ( 'datasource.clickhouse.dev' ) local chProd = require ( 'datasource.clickhouse.prod' ) local pgDev = require ( 'datasource.postgres.dev' ) local pgProd = require ( 'datasource.postgres.prod' ) local prom1 = require ( 'datasource.prometheus.prom1' ) Null fields (Clickhouse, Postgres, MySQL) If your query returns a data with null values, you not may get these fields by iteration loop. The behavior is the same as 'nil' value in the Lua table An example: The 'token' field may return a string or null. In this example, if returns null, this string will not be printed script.lua res = pg . query ( 'SELECT name, token FROM users' ) for _ , row in pairs ( res ) do for columnName , columnValue in pairs ( row ) do print ( columnName .. ' = ' .. columnValue ) end end You can straight check value to nil script.lua res = pg . query ( 'SELECT name, token FROM users' ) for _ , row in pairs ( res ) do print ( row . name ) print ( row . token ) -- row.token equals to nil end","title":"about"},{"location":"core-modules/datasource/about/#null-fields-clickhouse-postgres-mysql","text":"If your query returns a data with null values, you not may get these fields by iteration loop. The behavior is the same as 'nil' value in the Lua table An example: The 'token' field may return a string or null. In this example, if returns null, this string will not be printed script.lua res = pg . query ( 'SELECT name, token FROM users' ) for _ , row in pairs ( res ) do for columnName , columnValue in pairs ( row ) do print ( columnName .. ' = ' .. columnValue ) end end You can straight check value to nil script.lua res = pg . query ( 'SELECT name, token FROM users' ) for _ , row in pairs ( res ) do print ( row . name ) print ( row . token ) -- row.token equals to nil end","title":"Null fields (Clickhouse, Postgres, MySQL)"},{"location":"core-modules/datasource/clickhouse/","text":"The datasource.clickhouse module allows make queries to a Clickhouse cluster Usage: script.lua local db = require ( 'datasource.clickhouse.<NAME_FROM_CONFIG>' ) Methods query query('<SQL QUERY>') result, error Send a query. If an error occurred, it will be returned as second value A result format: { -- row 1 { <FIELD1_NAME> = <FIELD1_VALUE>, <FIELD2_NAME> = <FIELD2_VALUE>, ... }, -- row 2 { <FIELD1_NAME> = <FIELD1_VALUE>, <FIELD2_NAME> = <FIELD2_VALUE>, ... }, -- row N ... } An example: script.lua local db = require ( 'datasource.clickhouse.dev' ) local res , err = db . query ( \"SELECT table, sum(bytes) AS size FROM system.parts WHERE active AND database = 'system' GROUP BY table\" ) if err ~= nil then return end -- res { { table = 'query_thread_log' , size = 943846427 }, { table = 'metric_log' , size = 656645852 }, { table = 'query_log' , size = 997251520 }, { table = 'part_log' , size = 2037035728 } }","title":"clickhouse"},{"location":"core-modules/datasource/clickhouse/#methods","text":"","title":"Methods"},{"location":"core-modules/datasource/clickhouse/#query","text":"query('<SQL QUERY>') result, error Send a query. If an error occurred, it will be returned as second value A result format: { -- row 1 { <FIELD1_NAME> = <FIELD1_VALUE>, <FIELD2_NAME> = <FIELD2_VALUE>, ... }, -- row 2 { <FIELD1_NAME> = <FIELD1_VALUE>, <FIELD2_NAME> = <FIELD2_VALUE>, ... }, -- row N ... } An example: script.lua local db = require ( 'datasource.clickhouse.dev' ) local res , err = db . query ( \"SELECT table, sum(bytes) AS size FROM system.parts WHERE active AND database = 'system' GROUP BY table\" ) if err ~= nil then return end -- res { { table = 'query_thread_log' , size = 943846427 }, { table = 'metric_log' , size = 656645852 }, { table = 'query_log' , size = 997251520 }, { table = 'part_log' , size = 2037035728 } }","title":"query"},{"location":"core-modules/datasource/loki/","text":"The module datasource.loki allows get data from sources, which support query language LogQL by Grafana Loki See more about Loki script.lua local loki = require ( 'datasource.loki.<NAME_FROM_CONFIG>' ) Methods query query('<QUERY>'[, <QUERY_OPTIONS>]) result, error Instant Query A result format: { { lables = { <LABEL_NAME> = <LABEL_VALUE>, ... }, entries = { { timestamp = <TIMESTAMP>, line = <VALUE> }, ... } }, ... } The options: { time = <TIME RFC3339|Timestamp> -- Evaluation timestamp direction = [backward|forward] -- Determines the sort order of logs. Supported values are forward or backward. Defaults to backward limit = <NUMBER> -- The max number of entries to return } For example: script.lua local loki = require ( 'datasource.loki.dev' ) local res , err = loki . query ( '{service=\"srv1\"}' ) if err ~= nil then return end -- results: { ... { labels = { service = srv1 level = 1 } entries = { { timestamp = 1581934085 line = 'Log line' } } }, { labels = { service = srv1 level = 2 } entries = { { timestamp = 1581934085 line = 'Log line' } } }, ... } range range('<QUERY>'[, <QUERY_OPTIONS>]) result, error Range Query Result format same as query result The options: { start = <TIME RFC3339|Timestamp> -- start time end = <TIME RFC3339|Timestamp> -- end time step = <NUMBER> -- Query resolution step width in duration format or float number of seconds direction = [backward|forward] -- Determines the sort order of logs. Supported values are forward or backward. Defaults to backward limit = <NUMBER> -- The max number of entries to return }","title":"loki"},{"location":"core-modules/datasource/loki/#methods","text":"","title":"Methods"},{"location":"core-modules/datasource/loki/#query","text":"query('<QUERY>'[, <QUERY_OPTIONS>]) result, error Instant Query A result format: { { lables = { <LABEL_NAME> = <LABEL_VALUE>, ... }, entries = { { timestamp = <TIMESTAMP>, line = <VALUE> }, ... } }, ... } The options: { time = <TIME RFC3339|Timestamp> -- Evaluation timestamp direction = [backward|forward] -- Determines the sort order of logs. Supported values are forward or backward. Defaults to backward limit = <NUMBER> -- The max number of entries to return } For example: script.lua local loki = require ( 'datasource.loki.dev' ) local res , err = loki . query ( '{service=\"srv1\"}' ) if err ~= nil then return end -- results: { ... { labels = { service = srv1 level = 1 } entries = { { timestamp = 1581934085 line = 'Log line' } } }, { labels = { service = srv1 level = 2 } entries = { { timestamp = 1581934085 line = 'Log line' } } }, ... }","title":"query"},{"location":"core-modules/datasource/loki/#range","text":"range('<QUERY>'[, <QUERY_OPTIONS>]) result, error Range Query Result format same as query result The options: { start = <TIME RFC3339|Timestamp> -- start time end = <TIME RFC3339|Timestamp> -- end time step = <NUMBER> -- Query resolution step width in duration format or float number of seconds direction = [backward|forward] -- Determines the sort order of logs. Supported values are forward or backward. Defaults to backward limit = <NUMBER> -- The max number of entries to return }","title":"range"},{"location":"core-modules/datasource/mysql/","text":"The datasource.mysql module allows make queries to a MySQL database Usage: script.lua local db = require ( 'datasource.myqsl.<NAME_FROM_CONFIG>' ) Methods query query('<SQL QUERY>') result, error Make a query. If an error occurred, it will be returns as second value A result format: { -- row 1 { <FIELD1_NAME> = <FIELD1_VALUE>, <FIELD2_NAME> = <FIELD2_VALUE>, ... }, -- row 2 { <FIELD1_NAME> = <FIELD1_VALUE>, <FIELD2_NAME> = <FIELD2_VALUE>, ... }, -- row N ... } An example: script.lua local db = require ( 'datasource.mysql.dev' ) local res , err = db . query ( \"SELECT id, name FROM users\" ) if err ~= nil then return end -- res { { id = 1 , name = 'root' , }, { id = 2 , name = 'admin' , }, { id = 4 , name = 'user1' , }, }","title":"mysql"},{"location":"core-modules/datasource/mysql/#methods","text":"","title":"Methods"},{"location":"core-modules/datasource/mysql/#query","text":"query('<SQL QUERY>') result, error Make a query. If an error occurred, it will be returns as second value A result format: { -- row 1 { <FIELD1_NAME> = <FIELD1_VALUE>, <FIELD2_NAME> = <FIELD2_VALUE>, ... }, -- row 2 { <FIELD1_NAME> = <FIELD1_VALUE>, <FIELD2_NAME> = <FIELD2_VALUE>, ... }, -- row N ... } An example: script.lua local db = require ( 'datasource.mysql.dev' ) local res , err = db . query ( \"SELECT id, name FROM users\" ) if err ~= nil then return end -- res { { id = 1 , name = 'root' , }, { id = 2 , name = 'admin' , }, { id = 4 , name = 'user1' , }, }","title":"query"},{"location":"core-modules/datasource/postgres/","text":"The datasource.postgres module allows make queries to a Postgres datasource Usage: script.lua local db = require ( 'datasource.postgres.<NAME_FROM_CONFIG>' ) Methods query query('<SQL QUERY>') result, error Send a query. If an error occurred, it will be returned as second value A result format: { -- row 1 { <FIELD1_NAME> = <FIELD1_VALUE>, <FIELD2_NAME> = <FIELD2_VALUE>, ... }, -- row 2 { <FIELD1_NAME> = <FIELD1_VALUE>, <FIELD2_NAME> = <FIELD2_VALUE>, ... }, -- row N ... } An example: script.lua local db = require ( 'datasource.postgres.dev' ) local res , err = db . query ( \"SELECT id, name FROM users\" ) if err ~= nil then return end -- res { { id = 1 , name = 'root' , }, { id = 2 , name = 'admin' , }, { id = 4 , name = 'user1' , }, }","title":"postgres"},{"location":"core-modules/datasource/postgres/#methods","text":"","title":"Methods"},{"location":"core-modules/datasource/postgres/#query","text":"query('<SQL QUERY>') result, error Send a query. If an error occurred, it will be returned as second value A result format: { -- row 1 { <FIELD1_NAME> = <FIELD1_VALUE>, <FIELD2_NAME> = <FIELD2_VALUE>, ... }, -- row 2 { <FIELD1_NAME> = <FIELD1_VALUE>, <FIELD2_NAME> = <FIELD2_VALUE>, ... }, -- row N ... } An example: script.lua local db = require ( 'datasource.postgres.dev' ) local res , err = db . query ( \"SELECT id, name FROM users\" ) if err ~= nil then return end -- res { { id = 1 , name = 'root' , }, { id = 2 , name = 'admin' , }, { id = 4 , name = 'user1' , }, }","title":"query"},{"location":"core-modules/datasource/prometheus/","text":"The datasource.prometheus module allows send queries to a Prometheus datasource It may be any source, which supports a PromQL. For example Victoria Metrics Usage: script.lua local db = require ( 'datasource.prometheus.<NAME_FROM_CONFIG>' ) Methods query query('<QUERY>'[, <QUERY_OPTIONS>]) result, error Instant Query A result format: { { metrics = { <METRIC_NAME> = <METRIC_VALUE>, ... }, value = { timestamp = <TIMESTAMP>, value = <VALUE> } }, ... } An options: { time = <TIME RFC3339|Timestamp> -- Evaluation timestamp } An example: script.lua local prom = require ( 'datasource.prometheus.dev' ) local res , err = prom . query ( \"node_cpu_seconds_total\" ) if err ~= nil then return end -- res { ... { metrics = { __name__ = node_cpu_seconds_total cpu = 7 datacenter = dc1 job = node_exporter mode = softirq } value = { timestamp = 1581934085 value = 118687.2 } }, { metrics = { __name__ = node_cpu_seconds_total cpu = 6 datacenter = dc1 job = node_exporter mode = idle } value = { timestamp = 1581934085 value = 3.95205464e+06 }, ... } range range('<QUERY>'[, <QUERY_OPTIONS>]) result, error Range Query A result format: { { metrics = { <METRIC_NAME> = <METRIC_VALUE>, ... }, values = { { timestamp = <TIMESTAMP>, value = <VALUE> }, ... } }, ... } An options: { start = <TIME RFC3339|Timestamp> -- start time end = <TIME RFC3339|Timestamp> -- end time step = <NUMBER> -- Query resolution step width in duration format or float number of seconds } An example: script.lua local prom = require ( 'datasource.prometheus.dev' ) local res , err = prom . range ( \"node_cpu_seconds_total\" ) if err ~= nil then return end -- res { ... { metrics = { __name__ = node_cpu_seconds_total cpu = 7 datacenter = dc1 job = node_exporter mode = softirq } values = { { timestamp = 1581837350 , value = 186776.71 }, { timestamp = 1581840950 , value = 186770.40 }, ... } }, { metrics = { __name__ = node_cpu_seconds_total cpu = 6 datacenter = dc1 job = node_exporter mode = idle } values = { { timestamp = 1581837350 , value = 186776.71 }, { timestamp = 1581840950 , value = 186770.40 }, ... } }, ... }","title":"prometheus"},{"location":"core-modules/datasource/prometheus/#methods","text":"","title":"Methods"},{"location":"core-modules/datasource/prometheus/#query","text":"query('<QUERY>'[, <QUERY_OPTIONS>]) result, error Instant Query A result format: { { metrics = { <METRIC_NAME> = <METRIC_VALUE>, ... }, value = { timestamp = <TIMESTAMP>, value = <VALUE> } }, ... } An options: { time = <TIME RFC3339|Timestamp> -- Evaluation timestamp } An example: script.lua local prom = require ( 'datasource.prometheus.dev' ) local res , err = prom . query ( \"node_cpu_seconds_total\" ) if err ~= nil then return end -- res { ... { metrics = { __name__ = node_cpu_seconds_total cpu = 7 datacenter = dc1 job = node_exporter mode = softirq } value = { timestamp = 1581934085 value = 118687.2 } }, { metrics = { __name__ = node_cpu_seconds_total cpu = 6 datacenter = dc1 job = node_exporter mode = idle } value = { timestamp = 1581934085 value = 3.95205464e+06 }, ... }","title":"query"},{"location":"core-modules/datasource/prometheus/#range","text":"range('<QUERY>'[, <QUERY_OPTIONS>]) result, error Range Query A result format: { { metrics = { <METRIC_NAME> = <METRIC_VALUE>, ... }, values = { { timestamp = <TIMESTAMP>, value = <VALUE> }, ... } }, ... } An options: { start = <TIME RFC3339|Timestamp> -- start time end = <TIME RFC3339|Timestamp> -- end time step = <NUMBER> -- Query resolution step width in duration format or float number of seconds } An example: script.lua local prom = require ( 'datasource.prometheus.dev' ) local res , err = prom . range ( \"node_cpu_seconds_total\" ) if err ~= nil then return end -- res { ... { metrics = { __name__ = node_cpu_seconds_total cpu = 7 datacenter = dc1 job = node_exporter mode = softirq } values = { { timestamp = 1581837350 , value = 186776.71 }, { timestamp = 1581840950 , value = 186770.40 }, ... } }, { metrics = { __name__ = node_cpu_seconds_total cpu = 6 datacenter = dc1 job = node_exporter mode = idle } values = { { timestamp = 1581837350 , value = 186776.71 }, { timestamp = 1581840950 , value = 186770.40 }, ... } }, ... }","title":"range"},{"location":"getting-started/cli-flags/","text":"-config=/path/to/config.yml path to config file (yml or hcl) default: config.yml -logLevel=[LOG LEVEL] log level. ERROR, INFO or DEBUG default: INFO -debug turn on debug mode for logging in human-readable format default: false -once once run scripts and exit default: false -script=postgres.pg1.demoscript run only provided script -json output json format (for balerter/test utility) -safemode disable http module and embedded lua modules","title":"CLI flags"},{"location":"getting-started/installation/","text":"Docker The official images: https://hub.docker.com/r/balerter https://github.com/orgs/balerter/packages docker run \\ -v /path/to/config.yml:/opt/config.yml \\ balerter/balerter -config = /opt/config.yml or docker run \\ -v /path/to/config.yml:/opt/config.yml \\ ghcr.io/balerter/balerter -config = /opt/config.yml Build from sources Clone the repo and build the Balerter Require Go 1.18 or later git clone https://github.com/balerter/balerter.git cd balerter go build -o balerter ./cmd/balerter","title":"installation"},{"location":"getting-started/installation/#docker","text":"The official images: https://hub.docker.com/r/balerter https://github.com/orgs/balerter/packages docker run \\ -v /path/to/config.yml:/opt/config.yml \\ balerter/balerter -config = /opt/config.yml or docker run \\ -v /path/to/config.yml:/opt/config.yml \\ ghcr.io/balerter/balerter -config = /opt/config.yml","title":"Docker"},{"location":"getting-started/installation/#build-from-sources","text":"Clone the repo and build the Balerter Require Go 1.18 or later git clone https://github.com/balerter/balerter.git cd balerter go build -o balerter ./cmd/balerter","title":"Build from sources"},{"location":"getting-started/quickstart/","text":"Quick start example","title":"quick start"},{"location":"lua-modules/about/","text":"You can use external lua modules, wrote with the Lua language You should place it to the modules folder A module can be written in the single file. In this case module name will be same as filename An example: root | | modules | conv.lua script.lua local conv = require ( 'conv' ) The module can be placed in one folder with several files. In this case folder must have file init.lua with export code An example: root | | modules | conv.lua | money | convert.lua | compress.lua | init.lua script.lua local money = require ( 'money' )","title":"about"},{"location":"lua-modules/new/","text":"A simple example Method add with two arguments, returns sum | | modules | math.lua modules/math.lua local M = {} local function add ( a , b ) return a + b end rawset ( M , 'add' , add ) return M An example: script.lua local math = require ( 'math' ) local res = math . add ( 10 , 20 ) print ( res ) -- 30","title":"create modules"},{"location":"lua-modules/presets/","text":"By default, Balerter distributed with some preset modules, which placed in the modules folder. They are not needed for the balerter functional h (helper) Usage: script.lua local h = require ( 'h' ) tableToMap tableToMap(table, keyFieldName) table, error Convert lua table to hash-table with keys as 'keyFieldName' value An example: script.lua table = { { date = '2020-01-01' , id = 'a' , name = 'aa' }, { date = '2020-01-01' , id = 'b' , name = 'bb' }, ... } res , err = h . tableToMap ( table , 'id' ) -- res { 'a' = { date = '2020-01-01' , id = 'a' , name = 'aa' }, 'b' = { date = '2020-01-01' , id = 'b' , name = 'bb' }, ... } print print(table) Beautify print table or any value to the console script.lua local t = { [ 'foo' ] = { [ 'bar' ] = 42 } } h . print ( t ) -- a result { foo = { bar = 42 } } json https://github.com/rxi/json.lua Allows encode/decode json script.lua json = require ( 'json' ) json . encode ({ 1 , 2 , 3 , { x = 10 } }) -- Returns '[1,2,3,{\"x\":10}]' json . decode ( '[1,2,3,{\"x\":10}]' ) -- Returns { 1, 2, 3, { x = 10 } } csv https://github.com/FourierTransformer/ftcsv Work with csv An example: script.lua local db = require ( 'datasource.postgres.pg1' ) local log = require ( 'log' ) local csv = require ( 'csv' ) local h = require ( 'h' ) res , err = db . query ( 'SELECT * FROM users' ) if err ~= nil then log . error ( 'query error: ' .. err ) return end h . print ( csv . encode ( res , \",\" ))","title":"preset modules"},{"location":"lua-modules/presets/#h-helper","text":"Usage: script.lua local h = require ( 'h' )","title":"h (helper)"},{"location":"lua-modules/presets/#tabletomap","text":"tableToMap(table, keyFieldName) table, error Convert lua table to hash-table with keys as 'keyFieldName' value An example: script.lua table = { { date = '2020-01-01' , id = 'a' , name = 'aa' }, { date = '2020-01-01' , id = 'b' , name = 'bb' }, ... } res , err = h . tableToMap ( table , 'id' ) -- res { 'a' = { date = '2020-01-01' , id = 'a' , name = 'aa' }, 'b' = { date = '2020-01-01' , id = 'b' , name = 'bb' }, ... }","title":"tableToMap"},{"location":"lua-modules/presets/#print","text":"print(table) Beautify print table or any value to the console script.lua local t = { [ 'foo' ] = { [ 'bar' ] = 42 } } h . print ( t ) -- a result { foo = { bar = 42 } }","title":"print"},{"location":"lua-modules/presets/#json","text":"https://github.com/rxi/json.lua Allows encode/decode json script.lua json = require ( 'json' ) json . encode ({ 1 , 2 , 3 , { x = 10 } }) -- Returns '[1,2,3,{\"x\":10}]' json . decode ( '[1,2,3,{\"x\":10}]' ) -- Returns { 1, 2, 3, { x = 10 } }","title":"json"},{"location":"lua-modules/presets/#csv","text":"https://github.com/FourierTransformer/ftcsv Work with csv An example: script.lua local db = require ( 'datasource.postgres.pg1' ) local log = require ( 'log' ) local csv = require ( 'csv' ) local h = require ( 'h' ) res , err = db . query ( 'SELECT * FROM users' ) if err ~= nil then log . error ( 'query error: ' .. err ) return end h . print ( csv . encode ( res , \",\" ))","title":"csv"},{"location":"scripts/about/","text":"For script use language: Lua 5.1 Official lua documentation site for developers We use Golang library https://github.com/yuin/gopher-lua A simple example. Comments in lua scripts have prefix -- script.lua -- in the head of script you can define some meta-tags. -- See more in section 'meta-tags' -- @cron 0 * * * * -- store 1e9 to the variable sizeLimit local sizeLimit = 1000000000 -- add Log module local log = require ( \"log\" ) -- add Clickhouse datasource local ch1 = require ( \"datasource.clickhouse.ch1\" ) -- send query to the clickhouse datasource local res , err = ch1 . query ( \"SELECT sum(bytes) AS size FROM system.parts WHERE active\" ) -- if an error occurred, print the error and exit if err ~= nil then log . error ( \"clickhouse 'ch1' query error: \" .. err ) return end -- get first item (first array element in Lua is 1, not 0!) -- and get field size local currentSize = res [ 1 ]. size if currentSize > sizeLimit then alert . error ( \"clickhouse-disk-space\" , \"Check disk space in Clickhouse cluster! Current busy: \" .. tostring ( currentSize )) else alert . success ( \"clickhouse-disk-space\" , \"Clickhouse disk space - ok\" ) end Naming Script name builds by next pattern: <provider type>.<provider name>.<name> Where: provider type is string file , folder or postgres provider name is provider name from the config file For folder and file providers file name will be take as script name. If suffix .lua is present, it will be trimmed. Example: config.yaml scripts : folder : - name : scripts path : /opt/scripts mask : '*.lua' file : - name : demo1 filename : /path/to/demo.lua Script names: folder.scripts.demo","title":"about"},{"location":"scripts/about/#naming","text":"Script name builds by next pattern: <provider type>.<provider name>.<name> Where: provider type is string file , folder or postgres provider name is provider name from the config file For folder and file providers file name will be take as script name. If suffix .lua is present, it will be trimmed. Example: config.yaml scripts : folder : - name : scripts path : /opt/scripts mask : '*.lua' file : - name : demo1 filename : /path/to/demo.lua Script names: folder.scripts.demo","title":"Naming"},{"location":"scripts/escalate/","text":"If you can to notify specific channels if the alert still not resolve, you can use @escalate meta-tag for scripts. A script example: -- @cron 0 */10 * * * * -- @escalate 5:telegram_cto,slack_manager 10:telegram_ceo -- @channels slack_ingeneer ... alert . error ( 'script-id' , 'Alert message' ) By default, this script sent alerts to slack_ingeneer channel. In this example script will be run every 10 minutes and if the alert is not resolved, alert will be sent to the channels telegram_cto and slack_ingeneer on 5 script run (if error state is error ). And alert will be sent to telegram_ceo on 10-th script run. Escalate options --@escalate num:channel,channel num:channel num - number of script alerts run error before alert will be sent to the channels After num: you can define channels list, separated by , Escalate rules are space-separated, so you can define multiple rules.","title":"escalate alerts"},{"location":"scripts/escalate/#escalate-options","text":"--@escalate num:channel,channel num:channel num - number of script alerts run error before alert will be sent to the channels After num: you can define channels list, separated by , Escalate rules are space-separated, so you can define multiple rules.","title":"Escalate options"},{"location":"scripts/meta-tags/","text":"In the script head you can define some meta-tags script.lua -- @cron 0 * * * * * -- @ignore local log = require ( 'log' ) Every meta-tag has a format: @<TAG_NAME> [<TAG_OPTIONS>] All meta-tags should be exactly in the head of script Any not empty not comment string will interrupt meta-tags parsing script.lua -- You CAN place comments without tags -- @cront */10 * * * * * (comment in the meta-tag line NOT ALLOWED) -- -- empty comment string ALLOWED -- also ALLOWED empty strings local a = 10 -- @ignore -- this tag will not be parsing, because we write not empty not comment string above Meta-tags cron @cron <EXPRESSION> If not defined, used default value: 1 minutes (0 * * *) The cron expression have 6 sections: Second, Minute, Hour, Day-of-Month, Month, Day-of-week Link to the Wikipedia ignore @ignore If this meta-tag is present, this script will not be run An example: -- @ignore name @name <SCRIPT NAME> Script name for logging By default, use filename An example: -- @name script1 channels @channels <CHANNEL NAME 1>,<CHANNEL NAME 2>,... Allows redefining channels for send notifications. By default, notifications send to all channels, described in the configuration You can define multiply channel in comma-separated string An example: -- @channels slack-manager,email-ceo test @test <MAIN_SCRIPT_NAME> Mark this script as 'Test' for the script with name <MAIN_SCRIPT_NAME> This script will be running only with balerter/test tool. With balerter this script will be ignored -- @name demo-test -- @test demo test = require ( 'test' ) timeout @timeout <TIME DURATION> Set timeout for the script. By default, 1 hour -- @timeout 30s escalate @escalate NUM:CHANNEL,CHANNEL NUM:CHANNEL ... Define escalation rules for the script. NUM - alert fire count CHANNEL - channels name, comma-separated string Rules are space-separated string","title":"meta tags"},{"location":"scripts/meta-tags/#meta-tags","text":"","title":"Meta-tags"},{"location":"scripts/meta-tags/#cron","text":"@cron <EXPRESSION> If not defined, used default value: 1 minutes (0 * * *) The cron expression have 6 sections: Second, Minute, Hour, Day-of-Month, Month, Day-of-week Link to the Wikipedia","title":"cron"},{"location":"scripts/meta-tags/#ignore","text":"@ignore If this meta-tag is present, this script will not be run An example: -- @ignore","title":"ignore"},{"location":"scripts/meta-tags/#name","text":"@name <SCRIPT NAME> Script name for logging By default, use filename An example: -- @name script1","title":"name"},{"location":"scripts/meta-tags/#channels","text":"@channels <CHANNEL NAME 1>,<CHANNEL NAME 2>,... Allows redefining channels for send notifications. By default, notifications send to all channels, described in the configuration You can define multiply channel in comma-separated string An example: -- @channels slack-manager,email-ceo","title":"channels"},{"location":"scripts/meta-tags/#test","text":"@test <MAIN_SCRIPT_NAME> Mark this script as 'Test' for the script with name <MAIN_SCRIPT_NAME> This script will be running only with balerter/test tool. With balerter this script will be ignored -- @name demo-test -- @test demo test = require ( 'test' )","title":"test"},{"location":"scripts/meta-tags/#timeout","text":"@timeout <TIME DURATION> Set timeout for the script. By default, 1 hour -- @timeout 30s","title":"timeout"},{"location":"scripts/meta-tags/#escalate","text":"@escalate NUM:CHANNEL,CHANNEL NUM:CHANNEL ... Define escalation rules for the script. NUM - alert fire count CHANNEL - channels name, comma-separated string Rules are space-separated string","title":"escalate"},{"location":"testing/","text":"Balerter allows you to write tests for your scripts! For that you can use core module test . Run tests you can with balerter/test tool and same configuration file as main. Scrips will be obtained from scripts source, described in the configuration file. But all requests to datasources, or any core modules (as 'alert', 'kv' etc) will be mocked writing tests The main concept: One test script (with one or more test functions) for one main script An example: Main script: script.lua -- @name demoscript log = require ( 'log' ) log . error ( 'foo' ) log . info ( 'bar' ) -- log.warn('baz') Now, write and discuss a test script: script_test.lua -- @name demoscript-test -- @test demoscript local function my_test ( test ) test . log (). on ( 'error' , 'foo' ). response () test . log (). on ( 'info' , 'bar' ). response () test . log (). assertCalled ( 'error' , 'foo' ) test . log (). assertCalled ( 'info' , 'bar' ) test . log (). assertNotCalled ( 'warn' , 'baz' ) end return { [ 'My Test' ] = my_test , } With @test we did two things: Defined that this file is a test. Defined, that this test work with script with name 'demoscript' You can to define multiply test functions. The test function has one parameter - test module. At the end of the test script you must return a table with test names as keys and test functions as values test module Info A module test can be used only in test functions in scripts, which marked as tests with a tag @test You can: define data, which should be returned for calls to datasources or core modules in main script. If in the main script you wrote log.error('foo') , but in the test script you not define return value, you will get test error. define Asserts for calls, which you want or not Module methods: on test.<MODULE>.on(<METHOD>, [<ARG>, <ARG>, ...]).response([<ARG>, <ARG>, ...]) assertCalled test.<MODULE>.assertCalled(<METHOD>, [<ARG>, <ARG>, ...]) assertNotCalled test.<MODULE>.assertNotCalled(<METHOD>, [<ARG>, <ARG>, ...]) <MODULE> - it is may be datasource(<DATASOURCE_NAME>) for datasources. For example test.datasource('postgres.prod') . Or call core modules: log() http() chart() alert() kv() For example: script.lua -- define a response ('nil' at now) for call `log.error('error message')` in a main script test . log (). on ( 'error' , 'error message' ). response () -- check, that we want to see call `alert.error('alert-id', 'alert message')` test . alert (). assertCalled ( 'error' , 'alert-id' , 'alert message' ) -- define response for a call ch1.query('SELECT * FROM users'), ch1 = require('datasource.clickhouse.ch1') test . datasource ( 'clickhouse.ch1' ). on ( 'query' , 'SELECT * FROM users' ). response ({ { id = 1 , name = 'John' } }) Important! Even you call returns nothing ( log.info(...) ), you should register this call with test.log().on('info', 'message').response() run tests You can use the tool test Docker image example: docker run --rm \\ -v /path/to/config.hcl:/opt/config.hcl \\ -v /path/to/scripts:/opt/scripts \\ balerter/test -config = /opt/config.hcl If run fails, exit code will be equal 1. If run was success, but tests fails, exit code will be equals 2. An output example: [PASS] [demo-test] [test name 1] [alert] method 'success' with args [alert-id,All OK] was called [PASS] [demo-test] [test name 1] [kv] method 'get' with args [foo] was called [PASS] [demo-test] [test name 1] PASS [FAIL] [demo-test] [test name 2] [alert] method 'success' with args [alert-id,All OK] was called, but should not [PASS] [demo-test] [test name 2] [alert] method 'error' with args [alert-id Error get key] was not called [PASS] [demo-test] [test name 2] [kv] method 'get' with args [foo] was called [FAIL] [demo-test] [test name 2] FAIL [FAIL] [demo-test] FAIL First column - line result. Second column - a test script name. Third - test function name. Fourth - a module name. Last - a message. Last line mean total result for the script Scripts from the example above: script.lua -- main script -- @name demo alert = require ( 'alert' ) kv = require ( 'kv' ) v , err = kv . get ( 'foo' ) if err ~= nil then alert . error ( 'alert-id' , 'Error get key' ) else alert . success ( 'alert-id' , 'All OK' ) end script_test.lua -- test script -- @test demo -- @name demo-test local function test1 ( test ) test . alert (). on ( 'success' , 'alert-id' , 'All OK' ). response () test . alert (). assertCalled ( 'success' , 'alert-id' , 'All OK' ) test . kv (). on ( 'get' , 'foo' ). response ( 42 , nil ) test . kv (). assertCalled ( 'get' , 'foo' ) end local function test2 ( test ) test . alert (). on ( 'success' , 'alert-id' , 'All OK' ). response () test . alert (). assertNotCalled ( 'success' , 'alert-id' , 'All OK' ) test . alert (). assertNotCalled ( 'error' , 'alert-id' , 'Error get key' ) test . kv (). on ( 'get' , 'foo' ). response ( 42 , nil ) test . kv (). assertCalled ( 'get' , 'foo' ) end return { [ 'test name 1' ] = test1 , [ 'test name 2' ] = test2 , }","title":"Testing"},{"location":"testing/#writing-tests","text":"The main concept: One test script (with one or more test functions) for one main script An example: Main script: script.lua -- @name demoscript log = require ( 'log' ) log . error ( 'foo' ) log . info ( 'bar' ) -- log.warn('baz') Now, write and discuss a test script: script_test.lua -- @name demoscript-test -- @test demoscript local function my_test ( test ) test . log (). on ( 'error' , 'foo' ). response () test . log (). on ( 'info' , 'bar' ). response () test . log (). assertCalled ( 'error' , 'foo' ) test . log (). assertCalled ( 'info' , 'bar' ) test . log (). assertNotCalled ( 'warn' , 'baz' ) end return { [ 'My Test' ] = my_test , } With @test we did two things: Defined that this file is a test. Defined, that this test work with script with name 'demoscript' You can to define multiply test functions. The test function has one parameter - test module. At the end of the test script you must return a table with test names as keys and test functions as values","title":"writing tests"},{"location":"testing/#test-module","text":"Info A module test can be used only in test functions in scripts, which marked as tests with a tag @test You can: define data, which should be returned for calls to datasources or core modules in main script. If in the main script you wrote log.error('foo') , but in the test script you not define return value, you will get test error. define Asserts for calls, which you want or not Module methods:","title":"test module"},{"location":"testing/#on","text":"test.<MODULE>.on(<METHOD>, [<ARG>, <ARG>, ...]).response([<ARG>, <ARG>, ...])","title":"on"},{"location":"testing/#assertcalled","text":"test.<MODULE>.assertCalled(<METHOD>, [<ARG>, <ARG>, ...])","title":"assertCalled"},{"location":"testing/#assertnotcalled","text":"test.<MODULE>.assertNotCalled(<METHOD>, [<ARG>, <ARG>, ...]) <MODULE> - it is may be datasource(<DATASOURCE_NAME>) for datasources. For example test.datasource('postgres.prod') . Or call core modules: log() http() chart() alert() kv() For example: script.lua -- define a response ('nil' at now) for call `log.error('error message')` in a main script test . log (). on ( 'error' , 'error message' ). response () -- check, that we want to see call `alert.error('alert-id', 'alert message')` test . alert (). assertCalled ( 'error' , 'alert-id' , 'alert message' ) -- define response for a call ch1.query('SELECT * FROM users'), ch1 = require('datasource.clickhouse.ch1') test . datasource ( 'clickhouse.ch1' ). on ( 'query' , 'SELECT * FROM users' ). response ({ { id = 1 , name = 'John' } }) Important! Even you call returns nothing ( log.info(...) ), you should register this call with test.log().on('info', 'message').response()","title":"assertNotCalled"},{"location":"testing/#run-tests","text":"You can use the tool test Docker image example: docker run --rm \\ -v /path/to/config.hcl:/opt/config.hcl \\ -v /path/to/scripts:/opt/scripts \\ balerter/test -config = /opt/config.hcl If run fails, exit code will be equal 1. If run was success, but tests fails, exit code will be equals 2. An output example: [PASS] [demo-test] [test name 1] [alert] method 'success' with args [alert-id,All OK] was called [PASS] [demo-test] [test name 1] [kv] method 'get' with args [foo] was called [PASS] [demo-test] [test name 1] PASS [FAIL] [demo-test] [test name 2] [alert] method 'success' with args [alert-id,All OK] was called, but should not [PASS] [demo-test] [test name 2] [alert] method 'error' with args [alert-id Error get key] was not called [PASS] [demo-test] [test name 2] [kv] method 'get' with args [foo] was called [FAIL] [demo-test] [test name 2] FAIL [FAIL] [demo-test] FAIL First column - line result. Second column - a test script name. Third - test function name. Fourth - a module name. Last - a message. Last line mean total result for the script Scripts from the example above: script.lua -- main script -- @name demo alert = require ( 'alert' ) kv = require ( 'kv' ) v , err = kv . get ( 'foo' ) if err ~= nil then alert . error ( 'alert-id' , 'Error get key' ) else alert . success ( 'alert-id' , 'All OK' ) end script_test.lua -- test script -- @test demo -- @name demo-test local function test1 ( test ) test . alert (). on ( 'success' , 'alert-id' , 'All OK' ). response () test . alert (). assertCalled ( 'success' , 'alert-id' , 'All OK' ) test . kv (). on ( 'get' , 'foo' ). response ( 42 , nil ) test . kv (). assertCalled ( 'get' , 'foo' ) end local function test2 ( test ) test . alert (). on ( 'success' , 'alert-id' , 'All OK' ). response () test . alert (). assertNotCalled ( 'success' , 'alert-id' , 'All OK' ) test . alert (). assertNotCalled ( 'error' , 'alert-id' , 'Error get key' ) test . kv (). on ( 'get' , 'foo' ). response ( 42 , nil ) test . kv (). assertCalled ( 'get' , 'foo' ) end return { [ 'test name 1' ] = test1 , [ 'test name 2' ] = test2 , }","title":"run tests"}]}